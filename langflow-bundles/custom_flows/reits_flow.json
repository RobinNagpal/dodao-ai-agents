{
  "id": "564dda93-f00c-4ef4-85bd-2d8fddc4b293",
  "data": {
    "nodes": [
      {
        "id": "OpenAIModel-5RyXX",
        "type": "genericNode",
        "position": {
          "x": 2761.4324718628286,
          "y": 45
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "I am an investor and I want to invest in the REITs. For that purpose I want to asses the debt health of the REIT. I have provided the table with variables that are important to evaluate the debt health of the REIT. \n1. You have to make the calculations for Q3 2024\n2. You have to calculate the values for the variables\n3. Add another column to the table with name calculated value. \n4. Add another column with the calculation logic. \n5. Do not miss any variable\n6. When you perform calculation recheck it twice to make sure that you have done it correctly.\n7. After you are done with the calculations please add another column in the table where you ll make a comment comparing the calculated value with the ideal range for the very good REIT.  \nOver all the table should have following columns\n1. Variable Name\n2. Abbreviation\n3. Description\n4. Formula\n5. Calculation Detail/Logic\n6. Calculated Value\n7. Ideal Range (Very good REIT)+Comment\n\n\n  \n   <td>**Variable Name**\n\n   </td>\n   <td>**Abbreviation**\n\n   </td>\n   <td>**Description**\n\n   </td>\n   <td>**Formula**\n\n   </td>\n   <td>**Ideal Value (Very Good REIT)**\n\n   </td>\n   <td>**Operating Expense**\n\n   </td>\n   <td>**OP_EXP**\n\n   </td>\n   <td>OP_EXP (excluding depreciation & amortization)\n\n   </td>\n   <td>TOT_OP_EXP– DEP_AMORT\n\n   </td>\n   <td>N/A*\n\n   </td>\n   <td>**Total Rental Revenue **\n\n   </td>\n   <td>TOT_RENT_REV\n\n   </td>\n   <td>Includes all revenue from property operations. Does not include income from management fee.\n\n   </td>\n   <td>RENT_INC + OTHER_PROPERTY_INC \n\n   </td>\n   <td>N/A*\n\n   </td>\n   <td>**Net Operating Income**\n\n   </td>\n   <td>**NOI**\n\n   </td>\n   <td>Measures income from property operations after deducting operating expenses (excluding depreciation & amortization) from total rental revenue.\n\n   </td>\n   <td>TOT_RENT_REV – OP_EXP (excluding depreciation & amortization)\n\n   </td>\n   <td>N/A*\n\n   </td>\n   <td>**Net Income **\n\n   </td>\n   <td>**NET_INC**\n\n   </td>\n   <td>**total income **for the entire consolidated entity This is the **total loss** for the entire consolidated entity, which includes **both the company's owned operations and non-controlling interests** (such as external investors who have a stake in the company but do not have full control).\n\n   </td>\n   <td>NET_INC (**total income **for the entire consolidated entity)\n\n   </td>\n   <td>N/A*\n\n   </td>\n   <td>**EBITDA**\n\n   </td>\n   <td>**EBITDA**\n\n   </td>\n   <td>Indicates operating performance by adding back interest expense, income taxes, and depreciation & amortization to net income.\n\n   </td>\n   <td>NET_INC + INT_EXP + INC_TAX + DEP_AMORT\n\n   </td>\n   <td>N/A*\n\n   </td>\n   <td>**Principal Repayments for Debt **\n\n   </td>\n   <td>PRIN_REPAY\n\n   </td>\n   <td>Principal repayments can be extracted from the cashflow statement under CASH FLOWS FROM FINANCING ACTIVITIES. If the cashflow statement is for 9 months then for the quarter you need to divide the total with 3.\n\n   </td>\n   <td>**Payments on revolving credit facilities + Payments on mortgages and loans payable +**\n\n**Other debt repayments categorized under financing activities.**\n\n**If the cash flow statement is for 9 months, divide the total amount by 3 to get the Q3 value. Provide the result in both total and detailed breakdown format.**\n\n**Total Principal Repayments (9 Months)** = Found in the **Cash Flow Statement** under **CASH FLOWS FROM FINANCING ACTIVITIES.**\n\n**Divide by 3** to get the **quarterly principal repayment**\n\n   </td>\n   <td>N/A*\n\n   </td>\n   <td>**Equity + **convertible non-controlling preferred interest\n\n   </td>\n   <td>**(EQ + CNPI)**\n\n   </td>\n   <td>Addition of the Equity and the Noncontrolling interests in the Operating Partnership\n\n   </td>\n   <td>(EQ + CNPI)\n\n   </td>\n   <td>N/A*\n\n   </td>\n   <td>**Total Debt **\n\n   </td>\n   <td>TOT_D\n\n   </td>\n   <td>Total Debt = Sum of all interest-bearing borrowings that require repayment of principal (and interest) – typically including:\n\n    • Debt obligations, net\n\n    • Mortgage (or mortgage note) payable, net\n\n    • Credit facility term loan (or lines of credit and term loan), net\n\n    • Financing obligations\n\n  Any liabilities that are operating in nature (e.g., accounts payable, lease liabilities, deferred income, derivatives, distributions payable, etc.) are excluded.\n\n   </td>\n   <td>TOT_D = Debt obligations, net + Mortgage (or mortgage note) payable, net + Credit facility term loan (or lines of credit and term loan), net + Financing obligations\n\n   </td>\n   <td>N/A*\n\n   </td>\n   <td>**Debt Service Coverage Ratio**\n\n   </td>\n   <td>**DS_CR**\n\n   </td>\n   <td>Critical measure of the REIT’s ability to cover its total debt service (interest + principal repayments) using NOI.  A higher ratio means sufficient income to meet debt payments.\n\n   </td>\n   <td>NOI / (INT_EXP + PRIN_REPAY)\n\n   </td>\n   <td>1.3× – 1.5×\n\n   </td>\n   <td>**Net Debt-to-EBITDA Ratio**\n\n   </td>\n   <td>**ND_EBITDA**\n\n   </td>\n   <td>Key leverage indicator comparing net debt (total debt minus cash) to EBITDA. Lower ratios indicate a healthier balance sheet and stronger debt repayment capacity.\n\n   </td>\n   <td>(TOT_D – CASH_EQ) / EBITDA\n\n   </td>\n   <td>&lt; 2.5×\n\n   </td>\n   <td>**Debt Yield Ratio**\n\n   </td>\n   <td>**D_YLD**\n\n   </td>\n   <td>Reflects the return (via NOI) generated per unit of debt. A higher ratio indicates a robust, risk-adjusted debt profile attractive to lenders.\n\n   </td>\n   <td>NOI / TOT_D\n\n   </td>\n   <td>≥ 12%\n\n   </td>\n   <td>**Cash Flow-to-Debt Ratio**\n\n   </td>\n   <td>**CF_DR**\n\n   </td>\n   <td>Measures the REIT’s ability to cover its total debt using operating cash flow, highlighting sustainable cash generation for long-term debt servicing.\n\n   </td>\n   <td>OP_CF / TOT_D\n\n   </td>\n   <td>≥ 0.25\n\n   </td>\n   <td>**Adjusted Debt-to-Equity Ratio**\n\n   </td>\n   <td>**ADJ_DTE_RATIO**\n\n   </td>\n   <td>Shows the proportion of debt relative to total capital (equity plus convertible non-controlling preferred interest), providing a more accurate measure of leverage.\n\n   </td>\n   <td>TOT_D / (EQ + CNPI)\n\n   </td>\n   <td>0.4 – 0.6\n\n   </td>",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-5RyXX"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "OpenAIModel-wTUXc",
        "type": "genericNode",
        "position": {
          "x": 2763.1962635222317,
          "y": 849.7554004272965
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "Please extract the most important information related to debt for Q3 2024 that you think I should know before investing in a REIT. Extract each and every information that communicates important bits about financial leverage. For example different loans the REIT has taken and at what %. Be as detailed as possible and try to provide all tables.\n \nOther thing I want you to do is  to make a table for the debt types they have taken on, with following columns:\n1. Category\n2. Explaining the type of the debt category they have taken\n3. the company or the entity which is giving debt\n4. Amount of the debt \n5. Debt Repayment \n6. Covenants (if mentioned for debt type, explain in detail what they are. If not then just say 'NA')\n7. Risk\n8. Repercussion of not paying back\n9. Maturity\n10. Interest rate\nMake a table\n\nP.S.: Discount on Notes Payable, Accounting adjustment for notes payable, Assumed Market Debt Adjustments\tAccounting adjustment for market debt, \nDeferred Financing Expenses are not debt types. \n",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-wTUXc"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "OpenAIModel-jq5cx",
        "type": "genericNode",
        "position": {
          "x": 2787.187642488756,
          "y": 1662.2682762573982
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "I am an investor in REITs and I want you to evaluate the debt health of the company based on the data given. \n1. Tell me different loans the REIT has taken and at what interest rate %.  \n2. How is the debt affecting financial health and what is its impact? What is given to companies providing debt in return? \n3. 4-5 points on how is the current debt related financial health of the REIT.\n4. Does it face any risks related to the debt position.\n5. Any other info that you think I need to know related to debt health. \n\n\nFollow this template:\n1. Overview of Debt Instruments\n2. Impact of Debt on Financial Health\n3. Debt-Related Risks\n4. Additional Considerations\n5. Summary ",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-jq5cx"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "Prompt-UfRq8",
        "type": "genericNode",
        "position": {
          "x": 2088.8737107803113,
          "y": 727.285098110687
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{All_Financial_Data}, {Criterion}",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "Criterion": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "Criterion",
                "display_name": "Criterion",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "All_Financial_Data": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "All_Financial_Data",
                "display_name": "All_Financial_Data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "All_Financial_Data",
                "Criterion"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-UfRq8"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 419
        },
        "dragging": false
      },
      {
        "id": "TextInput-pqbuZ",
        "type": "genericNode",
        "position": {
          "x": 960.6402395531935,
          "y": 817.5886570877816
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "MDV",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "TextInput",
          "id": "TextInput-pqbuZ"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "TextInput-xCRyO",
        "type": "genericNode",
        "position": {
          "x": 1019.5607351175097,
          "y": 1924.3285966568847
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "debt",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "TextInput",
          "id": "TextInput-xCRyO"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "Webhook-V6mOQ",
        "type": "genericNode",
        "position": {
          "x": -2054.726230584075,
          "y": 989.5511005650145
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\n\nfrom langflow.custom import Component\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema import Data\n\n\nclass WebhookComponent(Component):\n    display_name = \"Webhook\"\n    description = \"Defines a webhook input for the flow.\"\n    name = \"Webhook\"\n    icon = \"webhook\"\n\n    inputs = [\n        MultilineInput(\n            name=\"data\",\n            display_name=\"Payload\",\n            info=\"Receives a payload from external systems via HTTP POST.\",\n        )\n    ]\n    outputs = [\n        Output(display_name=\"Data\", name=\"output_data\", method=\"build_data\"),\n    ]\n\n    def build_data(self) -> Data:\n        message: str | Data = \"\"\n        if not self.data:\n            self.status = \"No data provided.\"\n            return Data(data={})\n        try:\n            body = json.loads(self.data or \"{}\")\n        except json.JSONDecodeError:\n            body = {\"payload\": self.data}\n            message = f\"Invalid JSON payload. Please check the format.\\n\\n{self.data}\"\n        data = Data(data=body)\n        if not message:\n            message = data\n        self.status = message\n        return data\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "{\n  \"ticker\": \"FVR\",\n  \"shouldTriggerNext\": true,\n  \"criterion\": {\n      \"key\": \"debt\",\n      \"name\": \"Debt\",\n      \"shortDescription\": \"Evaluates the company's debt\",\n      \"importantMetrics\": [\n        {\n          \"key\": \"revenue_growth\",\n          \"name\": \"Revenue Growth\",\n          \"description\": \"Measures the increase in a company's sales over a specific period.\",\n          \"formula\": \"(current_period_revenue - previous_period_revenue) / previous_period_revenue\"\n        },\n        {\n          \"key\": \"net_income_margin\",\n          \"name\": \"Net Income Margin\",\n          \"description\": \"Indicates the percentage of revenue that remains as profit after all expenses are deducted.\",\n          \"formula\": \"net_income / total_revenue\"\n        },\n        {\n          \"key\": \"funds_from_operations\",\n          \"name\": \"Funds From Operations (FFO)\",\n          \"description\": \"A key performance indicator for REITs, reflecting cash generated from operations.\",\n          \"formula\": \"net_income + depreciation + amortization - gains on sales\"\n        }\n      ],\n      \"reports\": [\n        {\n          \"key\": \"financial_summary_report\",\n          \"name\": \"Financial Summary Report\",\n          \"description\": \"Provides a comprehensive overview of the company's financial performance, including revenue growth, net income margin, and FFO.\",\n          \"outputType\": \"Text\"\n        }\n      ]\n    }\n}\n",
                "display_name": "Payload",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Receives a payload from external systems via HTTP POST.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Defines a webhook input for the flow.",
            "icon": "webhook",
            "base_classes": [
              "Data"
            ],
            "display_name": "Webhook",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "output_data",
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "data",
            "key": "Webhook",
            "score": 0.0004187935651179184,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "Webhook",
          "id": "Webhook-V6mOQ"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "ParseData-xOKSw",
        "type": "genericNode",
        "position": {
          "x": -1476.5087372418645,
          "y": 789.4812492389767
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{ticker}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-xOKSw"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "ParseData-3GuQK",
        "type": "genericNode",
        "position": {
          "x": -1480.1958598986416,
          "y": 1244.785257770105
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{shouldTriggerNext}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-3GuQK"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "ParseData-Hdd7i",
        "type": "genericNode",
        "position": {
          "x": -1497.6183010481795,
          "y": 1715.3744622044214
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{criterion}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-Hdd7i"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "ParseJSONData-SBfgY",
        "type": "genericNode",
        "position": {
          "x": -1076.0988610017198,
          "y": 1774.4089006790225
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_value": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Data object to filter.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom json import JSONDecodeError\r\n\r\nimport jq\r\nfrom json_repair import repair_json\r\nfrom loguru import logger\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.inputs import HandleInput, MessageTextInput\r\nfrom langflow.io import Output\r\nfrom langflow.schema import Data\r\nfrom langflow.schema.message import Message\r\n\r\n\r\nclass ParseJSONDataComponent(Component):\r\n    display_name = \"Parse JSON\"\r\n    description = \"Convert and extract JSON fields.\"\r\n    icon = \"braces\"\r\n    name = \"ParseJSONData\"\r\n\r\n    inputs = [\r\n        HandleInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input\",\r\n            info=\"Data object to filter.\",\r\n            required=True,\r\n            input_types=[\"Message\", \"Data\"],\r\n        ),\r\n        MessageTextInput(\r\n            name=\"query\",\r\n            display_name=\"JQ Query\",\r\n            info=\"JQ Query to filter the data. The input is always a JSON list.\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\r\n    ]\r\n\r\n    def _parse_data(self, input_value) -> str:\r\n        if isinstance(input_value, Message) and isinstance(input_value.text, str):\r\n            return input_value.text\r\n        if isinstance(input_value, Data):\r\n            return json.dumps(input_value.data)\r\n        return str(input_value)\r\n\r\n    def filter_data(self) -> list[Data]:\r\n        to_filter = self.input_value\r\n        if not to_filter:\r\n            return []\r\n        # Check if input is a list\r\n        if isinstance(to_filter, list):\r\n            to_filter = [self._parse_data(f) for f in to_filter]\r\n        else:\r\n            to_filter = self._parse_data(to_filter)\r\n\r\n        # If input is not a list, don't wrap it in a list\r\n        if not isinstance(to_filter, list):\r\n            to_filter = repair_json(to_filter)\r\n            try:\r\n                to_filter_as_dict = json.loads(to_filter)\r\n            except JSONDecodeError:\r\n                try:\r\n                    to_filter_as_dict = json.loads(repair_json(to_filter))\r\n                except JSONDecodeError as e:\r\n                    msg = f\"Invalid JSON: {e}\"\r\n                    raise ValueError(msg) from e\r\n        else:\r\n            to_filter = [repair_json(f) for f in to_filter]\r\n            to_filter_as_dict = []\r\n            for f in to_filter:\r\n                try:\r\n                    to_filter_as_dict.append(json.loads(f))\r\n                except JSONDecodeError:\r\n                    try:\r\n                        to_filter_as_dict.append(json.loads(repair_json(f)))\r\n                    except JSONDecodeError as e:\r\n                        msg = f\"Invalid JSON: {e}\"\r\n                        raise ValueError(msg) from e\r\n            to_filter = to_filter_as_dict\r\n\r\n        full_filter_str = json.dumps(to_filter_as_dict)\r\n\r\n        logger.info(\"to_filter: \", to_filter)\r\n\r\n        results = jq.compile(self.query).input_text(full_filter_str).all()\r\n        logger.info(\"results: \", results)\r\n        return [Data(data=value) if isinstance(value, dict) else Data(text=str(value)) for value in results]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "query": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "query",
                "value": ".importantMetrics",
                "display_name": "JQ Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "JQ Query to filter the data. The input is always a JSON list.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Convert and extract JSON fields.",
            "icon": "braces",
            "base_classes": [
              "Data"
            ],
            "display_name": "Parse JSON",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "filtered_data",
                "hidden": null,
                "display_name": "Filtered Data",
                "method": "filter_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "query"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseJSONData",
          "id": "ParseJSONData-SBfgY"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 273
        },
        "dragging": false
      },
      {
        "id": "ParseJSONData-2fx28",
        "type": "genericNode",
        "position": {
          "x": -1065.8580818672363,
          "y": 2150.9952702138953
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "input_value": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Data object to filter.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nfrom json import JSONDecodeError\r\n\r\nimport jq\r\nfrom json_repair import repair_json\r\nfrom loguru import logger\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.inputs import HandleInput, MessageTextInput\r\nfrom langflow.io import Output\r\nfrom langflow.schema import Data\r\nfrom langflow.schema.message import Message\r\n\r\n\r\nclass ParseJSONDataComponent(Component):\r\n    display_name = \"Parse JSON\"\r\n    description = \"Convert and extract JSON fields.\"\r\n    icon = \"braces\"\r\n    name = \"ParseJSONData\"\r\n\r\n    inputs = [\r\n        HandleInput(\r\n            name=\"input_value\",\r\n            display_name=\"Input\",\r\n            info=\"Data object to filter.\",\r\n            required=True,\r\n            input_types=[\"Message\", \"Data\"],\r\n        ),\r\n        MessageTextInput(\r\n            name=\"query\",\r\n            display_name=\"JQ Query\",\r\n            info=\"JQ Query to filter the data. The input is always a JSON list.\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Filtered Data\", name=\"filtered_data\", method=\"filter_data\"),\r\n    ]\r\n\r\n    def _parse_data(self, input_value) -> str:\r\n        if isinstance(input_value, Message) and isinstance(input_value.text, str):\r\n            return input_value.text\r\n        if isinstance(input_value, Data):\r\n            return json.dumps(input_value.data)\r\n        return str(input_value)\r\n\r\n    def filter_data(self) -> list[Data]:\r\n        to_filter = self.input_value\r\n        if not to_filter:\r\n            return []\r\n        # Check if input is a list\r\n        if isinstance(to_filter, list):\r\n            to_filter = [self._parse_data(f) for f in to_filter]\r\n        else:\r\n            to_filter = self._parse_data(to_filter)\r\n\r\n        # If input is not a list, don't wrap it in a list\r\n        if not isinstance(to_filter, list):\r\n            to_filter = repair_json(to_filter)\r\n            try:\r\n                to_filter_as_dict = json.loads(to_filter)\r\n            except JSONDecodeError:\r\n                try:\r\n                    to_filter_as_dict = json.loads(repair_json(to_filter))\r\n                except JSONDecodeError as e:\r\n                    msg = f\"Invalid JSON: {e}\"\r\n                    raise ValueError(msg) from e\r\n        else:\r\n            to_filter = [repair_json(f) for f in to_filter]\r\n            to_filter_as_dict = []\r\n            for f in to_filter:\r\n                try:\r\n                    to_filter_as_dict.append(json.loads(f))\r\n                except JSONDecodeError:\r\n                    try:\r\n                        to_filter_as_dict.append(json.loads(repair_json(f)))\r\n                    except JSONDecodeError as e:\r\n                        msg = f\"Invalid JSON: {e}\"\r\n                        raise ValueError(msg) from e\r\n            to_filter = to_filter_as_dict\r\n\r\n        full_filter_str = json.dumps(to_filter_as_dict)\r\n\r\n        logger.info(\"to_filter: \", to_filter)\r\n\r\n        results = jq.compile(self.query).input_text(full_filter_str).all()\r\n        logger.info(\"results: \", results)\r\n        return [Data(data=value) if isinstance(value, dict) else Data(text=str(value)) for value in results]",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "query": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "query",
                "value": ".key",
                "display_name": "JQ Query",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "JQ Query to filter the data. The input is always a JSON list.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Convert and extract JSON fields.",
            "icon": "braces",
            "base_classes": [
              "Data"
            ],
            "display_name": "Parse JSON",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "filtered_data",
                "hidden": null,
                "display_name": "Filtered Data",
                "method": "filter_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "query"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseJSONData",
          "id": "ParseJSONData-2fx28"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 273
        },
        "dragging": false
      },
      {
        "id": "ConditionalRouter-99rTL",
        "type": "genericNode",
        "position": {
          "x": -82.64801006121907,
          "y": 1998.822181634701
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "case_sensitive",
                "value": false,
                "display_name": "Case Sensitive",
                "advanced": false,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"If-Else\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    icon = \"split\"\n    name = \"ConditionalRouter\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.__iteration_updated = False\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Text Input\",\n            info=\"The primary text input for the operation.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\", \"regex\"],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            real_time_refresh=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=False,\n        ),\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The message to pass through either route.\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            info=\"The maximum number of iterations for the conditional router.\",\n            value=10,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"default_route\",\n            display_name=\"Default Route\",\n            options=[\"true_result\", \"false_result\"],\n            info=\"The default route to take when max iterations are reached.\",\n            value=\"false_result\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\"),\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\"),\n    ]\n\n    def _pre_run_setup(self):\n        self.__iteration_updated = False\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\n        if not case_sensitive and operator != \"regex\":\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        if operator == \"not equals\":\n            return input_text != match_text\n        if operator == \"contains\":\n            return match_text in input_text\n        if operator == \"starts with\":\n            return input_text.startswith(match_text)\n        if operator == \"ends with\":\n            return input_text.endswith(match_text)\n        if operator == \"regex\":\n            try:\n                return bool(re.match(match_text, input_text))\n            except re.error:\n                return False  # Return False if the regex is invalid\n        return False\n\n    def iterate_and_stop_once(self, route_to_stop: str):\n        if not self.__iteration_updated:\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\n            self.__iteration_updated = True\n            if self.ctx.get(f\"{self._id}_iteration\", 0) >= self.max_iterations and route_to_stop == self.default_route:\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\n            self.stop(route_to_stop)\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"false_result\")\n            return self.message\n        self.iterate_and_stop_once(\"true_result\")\n        return Message(content=\"\")\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if not result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"true_result\")\n            return self.message\n        self.iterate_and_stop_once(\"false_result\")\n        return Message(content=\"\")\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        if field_name == \"operator\":\n            if field_value == \"regex\":\n                build_config.pop(\"case_sensitive\", None)\n\n            # Ensure case_sensitive is present for all other operators\n            elif \"case_sensitive\" not in build_config:\n                case_sensitive_input = next(\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\n                )\n                if case_sensitive_input:\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\n        return build_config\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default_route": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "true_result",
                  "false_result"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_route",
                "value": "false_result",
                "display_name": "Default Route",
                "advanced": true,
                "dynamic": false,
                "info": "The default route to take when max iterations are reached.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "input_text": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_text",
                "value": "",
                "display_name": "Text Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "match_text": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "match_text",
                "value": "debt_and_leverage",
                "display_name": "Match Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text input to compare against.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 10,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of iterations for the conditional router.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "message": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "message",
                "value": "",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through either route.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "operator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with",
                  "regex"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "operator",
                "value": "equals",
                "display_name": "Operator",
                "advanced": false,
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "split",
            "base_classes": [
              "Message"
            ],
            "display_name": "If-Else",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "true_result",
                "display_name": "True",
                "method": "true_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "false_result",
                "display_name": "False",
                "method": "false_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_text",
              "match_text",
              "operator",
              "case_sensitive",
              "message",
              "max_iterations",
              "default_route"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "logic",
            "key": "ConditionalRouter",
            "score": 0.001,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ConditionalRouter",
          "id": "ConditionalRouter-99rTL"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 585
        },
        "dragging": false
      },
      {
        "id": "ParseData-yReA0",
        "type": "genericNode",
        "position": {
          "x": -624.8452437390265,
          "y": 2172.5893168424836
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-yReA0"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "ConditionalRouter-nBmRN",
        "type": "genericNode",
        "position": {
          "x": -85.24240276379739,
          "y": 2759.0930164144665
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "case_sensitive": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "case_sensitive",
                "value": false,
                "display_name": "Case Sensitive",
                "advanced": false,
                "dynamic": false,
                "info": "If true, the comparison will be case sensitive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import re\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\n\n\nclass ConditionalRouterComponent(Component):\n    display_name = \"If-Else\"\n    description = \"Routes an input message to a corresponding output based on text comparison.\"\n    icon = \"split\"\n    name = \"ConditionalRouter\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.__iteration_updated = False\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_text\",\n            display_name=\"Text Input\",\n            info=\"The primary text input for the operation.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"match_text\",\n            display_name=\"Match Text\",\n            info=\"The text input to compare against.\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"operator\",\n            display_name=\"Operator\",\n            options=[\"equals\", \"not equals\", \"contains\", \"starts with\", \"ends with\", \"regex\"],\n            info=\"The operator to apply for comparing the texts.\",\n            value=\"equals\",\n            real_time_refresh=True,\n        ),\n        BoolInput(\n            name=\"case_sensitive\",\n            display_name=\"Case Sensitive\",\n            info=\"If true, the comparison will be case sensitive.\",\n            value=False,\n        ),\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The message to pass through either route.\",\n        ),\n        IntInput(\n            name=\"max_iterations\",\n            display_name=\"Max Iterations\",\n            info=\"The maximum number of iterations for the conditional router.\",\n            value=10,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"default_route\",\n            display_name=\"Default Route\",\n            options=[\"true_result\", \"false_result\"],\n            info=\"The default route to take when max iterations are reached.\",\n            value=\"false_result\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"True\", name=\"true_result\", method=\"true_response\"),\n        Output(display_name=\"False\", name=\"false_result\", method=\"false_response\"),\n    ]\n\n    def _pre_run_setup(self):\n        self.__iteration_updated = False\n\n    def evaluate_condition(self, input_text: str, match_text: str, operator: str, *, case_sensitive: bool) -> bool:\n        if not case_sensitive and operator != \"regex\":\n            input_text = input_text.lower()\n            match_text = match_text.lower()\n\n        if operator == \"equals\":\n            return input_text == match_text\n        if operator == \"not equals\":\n            return input_text != match_text\n        if operator == \"contains\":\n            return match_text in input_text\n        if operator == \"starts with\":\n            return input_text.startswith(match_text)\n        if operator == \"ends with\":\n            return input_text.endswith(match_text)\n        if operator == \"regex\":\n            try:\n                return bool(re.match(match_text, input_text))\n            except re.error:\n                return False  # Return False if the regex is invalid\n        return False\n\n    def iterate_and_stop_once(self, route_to_stop: str):\n        if not self.__iteration_updated:\n            self.update_ctx({f\"{self._id}_iteration\": self.ctx.get(f\"{self._id}_iteration\", 0) + 1})\n            self.__iteration_updated = True\n            if self.ctx.get(f\"{self._id}_iteration\", 0) >= self.max_iterations and route_to_stop == self.default_route:\n                route_to_stop = \"true_result\" if route_to_stop == \"false_result\" else \"false_result\"\n            self.stop(route_to_stop)\n\n    def true_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"false_result\")\n            return self.message\n        self.iterate_and_stop_once(\"true_result\")\n        return Message(content=\"\")\n\n    def false_response(self) -> Message:\n        result = self.evaluate_condition(\n            self.input_text, self.match_text, self.operator, case_sensitive=self.case_sensitive\n        )\n        if not result:\n            self.status = self.message\n            self.iterate_and_stop_once(\"true_result\")\n            return self.message\n        self.iterate_and_stop_once(\"false_result\")\n        return Message(content=\"\")\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        if field_name == \"operator\":\n            if field_value == \"regex\":\n                build_config.pop(\"case_sensitive\", None)\n\n            # Ensure case_sensitive is present for all other operators\n            elif \"case_sensitive\" not in build_config:\n                case_sensitive_input = next(\n                    (input_field for input_field in self.inputs if input_field.name == \"case_sensitive\"), None\n                )\n                if case_sensitive_input:\n                    build_config[\"case_sensitive\"] = case_sensitive_input.to_dict()\n        return build_config\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "default_route": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "true_result",
                  "false_result"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "default_route",
                "value": "false_result",
                "display_name": "Default Route",
                "advanced": true,
                "dynamic": false,
                "info": "The default route to take when max iterations are reached.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "input_text": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_text",
                "value": "",
                "display_name": "Text Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The primary text input for the operation.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "match_text": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "match_text",
                "value": "rental_income",
                "display_name": "Match Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text input to compare against.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 10,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of iterations for the conditional router.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "message": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "message",
                "value": "",
                "display_name": "Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The message to pass through either route.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "operator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "equals",
                  "not equals",
                  "contains",
                  "starts with",
                  "ends with",
                  "regex"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "operator",
                "value": "equals",
                "display_name": "Operator",
                "advanced": false,
                "dynamic": false,
                "info": "The operator to apply for comparing the texts.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Routes an input message to a corresponding output based on text comparison.",
            "icon": "split",
            "base_classes": [
              "Message"
            ],
            "display_name": "If-Else",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "true_result",
                "display_name": "True",
                "method": "true_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "false_result",
                "display_name": "False",
                "method": "false_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_text",
              "match_text",
              "operator",
              "case_sensitive",
              "message",
              "max_iterations",
              "default_route"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "logic",
            "key": "ConditionalRouter",
            "score": 0.001,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ConditionalRouter",
          "id": "ConditionalRouter-nBmRN"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 585
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-AX66z",
        "type": "genericNode",
        "position": {
          "x": 2784.489433457555,
          "y": -891.9597122883503
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "You are a highly knowledgeable financial data analysis assistant. You specialize in interpreting financial statements and computing financial metrics. Your task is to read the provided data, compute the requested metrics, and return results in a strictly defined JSON format.\n",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-AX66z"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        },
        "dragging": false
      },
      {
        "id": "Prompt-Ysvpz",
        "type": "genericNode",
        "position": {
          "x": 2321.2149424504987,
          "y": -663.7971361613972
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Below is the **financial data** you have to work with (e.g., revenue figures, net income, depreciation, etc.):\n\n{data}\n\nBelow is the **metrics definition** array:\n\n{metrics}\n\n**Your job**:\n1. For each metric, locate the relevant values in the financial data.\n2. Use the provided formula to calculate the metric’s numeric result. \n3. If any data is missing, do your best to provide an estimate if possible or set the value as NA.\n\nRemember, the output must be a valid JSON array —no additional text. Each object has the fields:\n- \"metricKey\" // same as the key in the metrics array \n- \"value\"  // the computed value as number\n- \"calculationExplanation\" //1-2 sentences explaining how you arrived at this value",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "data": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "data",
                "display_name": "data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "metrics": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "metrics",
                "display_name": "metrics",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "data",
                "metrics"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-Ysvpz"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 419
        },
        "dragging": false
      },
      {
        "id": "ParseData-XW3a8",
        "type": "genericNode",
        "position": {
          "x": -638.3893382737656,
          "y": 1731.3650788949508
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{text}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-XW3a8"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "SimpleAPIRequest-omPjz",
        "type": "genericNode",
        "position": {
          "x": 3740.75750465585,
          "y": 371.847110738212
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion report",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-omPjz"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        },
        "dragging": false
      },
      {
        "id": "CreateData-7GSjf",
        "type": "genericNode",
        "position": {
          "x": 4332.870887772863,
          "y": -777.3454475992836
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 3,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "metrics": ""
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-7GSjf"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 495
        },
        "dragging": false
      },
      {
        "id": "SimpleAPIRequest-yNwXg",
        "type": "genericNode",
        "position": {
          "x": 4709.364799006538,
          "y": -668.3607022922635
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion metrics",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-yNwXg"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        },
        "dragging": false
      },
      {
        "id": "StructuredOutput-SYD5J",
        "type": "genericNode",
        "position": {
          "x": 3523.084573394547,
          "y": -748.8114941386891
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import TYPE_CHECKING, cast\n\nfrom pydantic import BaseModel, Field, create_model\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output, StrInput, TableInput\nfrom langflow.schema.data import Data\n\nif TYPE_CHECKING:\n    from langflow.field_typing.constants import LanguageModel\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        StrInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"description\": (\n                        \"Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).\"\n                    ),\n                    \"default\": \"text\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Multiple\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                },\n            ],\n            value=[{\"name\": \"field\", \"description\": \"description of field\", \"type\": \"text\", \"multiple\": \"False\"}],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"Set to True if the model should generate a list of outputs instead of a single output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"structured_output\", display_name=\"Structured Output\", method=\"build_structured_output\"),\n    ]\n\n    def build_structured_output(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n        if self.multiple:\n            output_model = create_model(\n                schema_name,\n                objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n            )\n        else:\n            output_model = output_model_\n        try:\n            llm_with_structured_output = cast(\"LanguageModel\", self.llm).with_structured_output(schema=output_model)  # type: ignore[valid-type, attr-defined]\n\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        output = get_chat_result(runnable=llm_with_structured_output, input_value=self.input_value, config=config_dict)\n        if isinstance(output, BaseModel):\n            output_dict = output.model_dump()\n        else:\n            msg = f\"Output should be a Pydantic BaseModel, got {type(output)} ({output})\"\n            raise TypeError(msg)\n        return Data(data=output_dict)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input message to the language model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "multiple": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "multiple",
                "value": true,
                "display_name": "Generate Multiple",
                "advanced": false,
                "dynamic": false,
                "info": "Set to True if the model should generate a list of outputs instead of a single output.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "output_schema": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Name",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Specify the name of the output field.",
                      "default": "field",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "description",
                      "display_name": "Description",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Describe the purpose of the output field.",
                      "default": "description of field",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "type",
                      "display_name": "Type",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).",
                      "default": "text",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "multiple",
                      "display_name": "Multiple",
                      "sortable": true,
                      "filterable": true,
                      "type": "boolean",
                      "description": "Set to True if this output field should be a list of the specified type.",
                      "default": "False",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": [
                  {
                    "name": "metricKey",
                    "description": "name of the metric",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "value",
                    "description": "calculated value for the metric",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "calculationExplanation",
                    "description": "1-2 liner explanation of the calculation",
                    "type": "text",
                    "multiple": "False"
                  }
                ],
                "display_name": "Output Schema",
                "advanced": false,
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "schema_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "schema_name",
                "value": "",
                "display_name": "Schema Name",
                "advanced": true,
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "icon": "braces",
            "base_classes": [
              "Data"
            ],
            "display_name": "Structured Output",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "structured_output",
                "display_name": "Structured Output",
                "method": "build_structured_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "llm",
              "input_value",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "helpers",
            "key": "StructuredOutput",
            "score": 0.007568328950209746,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "StructuredOutput",
          "id": "StructuredOutput-SYD5J"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 439
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-Gdkap",
        "type": "genericNode",
        "position": {
          "x": 3143.9080149353217,
          "y": -1223.4573435907819
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "models",
            "key": "OpenAIModel",
            "score": 0.001,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-Gdkap"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        },
        "dragging": false
      },
      {
        "id": "CreateData-hC9YO",
        "type": "genericNode",
        "position": {
          "x": 3303.2042312143667,
          "y": 60.421591227463026
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 4,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "reportKey": "debt_variables"
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_4_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_4_key",
                "value": {
                  "data": ""
                },
                "display_name": "Field 4",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 4.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-hC9YO"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 577
        },
        "dragging": false
      },
      {
        "id": "CreateData-9sCOA",
        "type": "genericNode",
        "position": {
          "x": 3288.5372801375534,
          "y": 912.3006874721385
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 4,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "reportKey": "debt_information"
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_4_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_4_key",
                "value": {
                  "data": ""
                },
                "display_name": "Field 4",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 4.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-9sCOA"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 577
        },
        "dragging": false
      },
      {
        "id": "SimpleAPIRequest-JXv0R",
        "type": "genericNode",
        "position": {
          "x": 3755.9608000859707,
          "y": 1155.0387355202822
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion report",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-JXv0R"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        },
        "dragging": false
      },
      {
        "id": "CreateData-5JKqC",
        "type": "genericNode",
        "position": {
          "x": 3274.991392106604,
          "y": 1658.423055554671
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 4,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "reportKey": "debt_report"
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_4_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_4_key",
                "value": {
                  "data": ""
                },
                "display_name": "Field 4",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 4.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-5JKqC"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 577
        },
        "dragging": false
      },
      {
        "id": "SimpleAPIRequest-TeYwo",
        "type": "genericNode",
        "position": {
          "x": 3670.3102241530282,
          "y": 1942.2963835254402
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion report",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-TeYwo"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-AJUy9",
        "type": "genericNode",
        "position": {
          "x": 2753.76569799265,
          "y": -1941.3274768683395
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "You are a highly knowledgeable REIT performance analyst. Your role is to evaluate the provided financial statements and debt-related data to create five key performance criteria for assessing this REIT’s health and risk. Each checklist item must be scored 0 or 1 based on whether the REIT meets the criterion, with clear reasoning. Return the results only as a JSON list of 5 objects.\n\nEach object in the JSON list must contain:\n- \"checklistItem\" (string): A concise name/label for the performance criterion.\n- \"oneLinerExplanation\" (string): A brief 1-line summary of why it matters.\n- \"informationUsed\" (string): Summarize the relevant data from the REIT’s financials and debt disclosures used in the assessment.\n- \"detailedExplanation\" (string): A more thorough explanation of how this item was evaluated.\n- \"evaluationLogic\" (string): How you arrived at the score, referencing any numeric thresholds, comparisons, or other logic applied.\n- \"score\" (integer): 1 if the criterion is met, 0 if not met.\n\nDo not include any additional commentary or text outside the JSON list. Output only the JSON array of 5 objects.\n",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-AJUy9"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        },
        "dragging": false
      },
      {
        "id": "Prompt-IzAg5",
        "type": "genericNode",
        "position": {
          "x": 2335.1529601031657,
          "y": -1719.4279710942906
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Below is the information you have about the REIT, including financial statements, debt structure, and other relevant data:\n\n{data}\n\nPlease review this data and create a performance checklist of exactly five key criteria. Each criterion must:\n1) Address a critical aspect of REIT performance or risk (e.g., debt coverage, FFO growth, occupancy rates).\n2) Include numerical or specific references from the provided data in your explanation.\n3) Assign a score of 0 or 1 with clear logic on why it passes or fails.\n\nRemember, the output must be a valid JSON array of five objects only—no additional text. Each object has the fields:\n- \"checklistItem\"\n- \"oneLinerExplanation\"\n- \"informationUsed\"\n- \"detailedExplanation\"\n- \"evaluationLogic\"\n- \"score\"\n",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "data": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "data",
                "display_name": "data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "data"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-IzAg5"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 337
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-3cIRT",
        "type": "genericNode",
        "position": {
          "x": 3160.1529601031652,
          "y": -2321.3522612329193
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "models",
            "key": "OpenAIModel",
            "score": 0.001,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-3cIRT"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        },
        "dragging": false
      },
      {
        "id": "StructuredOutput-8uXrj",
        "type": "genericNode",
        "position": {
          "x": 3539.829824110044,
          "y": -1801.1912312296952
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import TYPE_CHECKING, cast\n\nfrom pydantic import BaseModel, Field, create_model\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output, StrInput, TableInput\nfrom langflow.schema.data import Data\n\nif TYPE_CHECKING:\n    from langflow.field_typing.constants import LanguageModel\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        StrInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"description\": (\n                        \"Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).\"\n                    ),\n                    \"default\": \"text\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Multiple\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                },\n            ],\n            value=[{\"name\": \"field\", \"description\": \"description of field\", \"type\": \"text\", \"multiple\": \"False\"}],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"Set to True if the model should generate a list of outputs instead of a single output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"structured_output\", display_name=\"Structured Output\", method=\"build_structured_output\"),\n    ]\n\n    def build_structured_output(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n        if self.multiple:\n            output_model = create_model(\n                schema_name,\n                objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n            )\n        else:\n            output_model = output_model_\n        try:\n            llm_with_structured_output = cast(\"LanguageModel\", self.llm).with_structured_output(schema=output_model)  # type: ignore[valid-type, attr-defined]\n\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        output = get_chat_result(runnable=llm_with_structured_output, input_value=self.input_value, config=config_dict)\n        if isinstance(output, BaseModel):\n            output_dict = output.model_dump()\n        else:\n            msg = f\"Output should be a Pydantic BaseModel, got {type(output)} ({output})\"\n            raise TypeError(msg)\n        return Data(data=output_dict)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input message to the language model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "multiple": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "multiple",
                "value": true,
                "display_name": "Generate Multiple",
                "advanced": false,
                "dynamic": false,
                "info": "Set to True if the model should generate a list of outputs instead of a single output.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "output_schema": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Name",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Specify the name of the output field.",
                      "default": "field",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "description",
                      "display_name": "Description",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Describe the purpose of the output field.",
                      "default": "description of field",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "type",
                      "display_name": "Type",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).",
                      "default": "text",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "multiple",
                      "display_name": "Multiple",
                      "sortable": true,
                      "filterable": true,
                      "type": "boolean",
                      "description": "Set to True if this output field should be a list of the specified type.",
                      "default": "False",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": [
                  {
                    "name": "checklistItem",
                    "description": "name of checklist item",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "oneLinerExplanation",
                    "description": "explanation of the checklist item",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "informationUsed",
                    "description": "information used from the provided data to come with the given score",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "detailedExplanation",
                    "description": "explanation for the checklist item selection ",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "evaluationLogic",
                    "description": "how the checklist item got evaluated against the provided data",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "score",
                    "description": "binary score either 1 or 0",
                    "type": "int",
                    "multiple": "False"
                  }
                ],
                "display_name": "Output Schema",
                "advanced": false,
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "schema_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "schema_name",
                "value": "",
                "display_name": "Schema Name",
                "advanced": true,
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "icon": "braces",
            "base_classes": [
              "Data"
            ],
            "display_name": "Structured Output",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "structured_output",
                "display_name": "Structured Output",
                "method": "build_structured_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "llm",
              "input_value",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "helpers",
            "key": "StructuredOutput",
            "score": 0.007568328950209746,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "StructuredOutput",
          "id": "StructuredOutput-8uXrj"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 439
        },
        "dragging": false
      },
      {
        "id": "CreateData-cEYyZ",
        "type": "genericNode",
        "position": {
          "x": 4393.550441086452,
          "y": -1840.4932195413353
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 3,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "performanceChecklist": ""
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-cEYyZ"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 495
        },
        "dragging": false
      },
      {
        "id": "SimpleAPIRequest-qwIFU",
        "type": "genericNode",
        "position": {
          "x": 4787.781819354326,
          "y": -1714.5203079283515
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion performance checklist",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-qwIFU"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        },
        "dragging": false
      },
      {
        "id": "ParseData-a99lI",
        "type": "genericNode",
        "position": {
          "x": 3961.3902525933368,
          "y": -1713.073283713373
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{objects}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-a99lI"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "ParseData-UqtlT",
        "type": "genericNode",
        "position": {
          "x": 3932.49397788522,
          "y": -640.1335931812281
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{objects}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-UqtlT"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "ParseData-G3dbR",
        "type": "genericNode",
        "position": {
          "x": 5798.873876207884,
          "y": 271.99109019452504
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{status_code}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-G3dbR"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "SimpleAPIRequest-5YuTC",
        "type": "genericNode",
        "position": {
          "x": 6865.617230938331,
          "y": 203.55591984830716
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Trigger next criterion report",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-5YuTC"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        },
        "dragging": false
      },
      {
        "id": "CreateData-5LEfq",
        "type": "genericNode",
        "position": {
          "x": 6408.268071617222,
          "y": 15.535928072122744
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 4,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "shouldTriggerNext": ""
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_4_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_4_key",
                "value": {
                  "overflow": ""
                },
                "display_name": "Field 4",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 4.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-5LEfq"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 577
        },
        "dragging": false
      },
      {
        "id": "OpenAIModel-hSujj",
        "type": "genericNode",
        "position": {
          "x": 8176.158702446904,
          "y": 5066.35226123292
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "I am an investor evaluating the rental health of a REIT before making an investment decision. The rental health assessment provides insights into how well the REIT is performing in terms of occupancy, rental income stability, tenant diversification, lease terms, and revenue growth.\n\nI have provided a table with variables that are important to evaluate the rental health of the REIT.\n\nInstructions:\nYou have to make calculations for Q3 2024.\nYou have to calculate the values for the variables.\nAdd another column to the table with the name Calculated Value.\nAdd another column with the Calculation Logic.\nDo not miss any variable.\nWhen you perform calculations, double-check them to ensure accuracy.\nAfter completing the calculations, add another column where you will provide a comment comparing the calculated value with the ideal range for a very good REIT.\nThe table should have the following columns:\nVariable Name\nAbbreviation\nDescription\nFormula\nCalculation Detail/Logic\nCalculated Value\nIdeal Range (Very Good REIT) + Comment\n\n<table>\n  <tr>\n    <th>Variable Name</th>\n    <th>Abbreviation</th>\n    <th>Description</th>\n    <th>Formula</th>\n    <th>Calculation Detail/Logic</th>\n    <th>Calculated Value</th>\n    <th>Ideal Range (Very Good REIT) + Comment</th>\n  </tr>\n  <tr>\n    <td><b>Occupancy Rate</b></td>\n    <td><b>OCC_RATE</b></td>\n    <td>Percentage of available rental space currently leased to tenants. Higher rates indicate strong tenant demand.</td>\n    <td>(Total Leased Space / Total Available Space) × 100</td>\n    <td>Divide leased space by total available space, then multiply by 100.</td>\n    <td></td>\n    <td>≥ 90% (A lower rate may indicate vacancy issues.)</td>\n  </tr>\n  <tr>\n    <td><b>Average Lease Term Remaining</b></td>\n    <td><b>AVG_LTERM</b></td>\n    <td>The average length of time (in years) remaining on existing leases. A longer term provides income stability.</td>\n    <td>Sum of Remaining Lease Terms / Number of Leases</td>\n    <td>Add up remaining years of all leases and divide by the total number of leases.</td>\n    <td></td>\n    <td>≥ 5 years (Shorter lease terms could increase turnover risk.)</td>\n  </tr>\n  <tr>\n    <td><b>Tenant Concentration Risk</b></td>\n    <td><b>TEN_CONC</b></td>\n    <td>Measures the proportion of rental income from the top tenants. A lower percentage indicates better diversification.</td>\n    <td>(Top 5 Tenants' Rental Income / Total Rental Income) × 100</td>\n    <td>Sum rental income from top 5 tenants, divide by total rental income, then multiply by 100.</td>\n    <td></td>\n    <td>≤ 25% (Higher concentration may indicate dependency on few tenants.)</td>\n  </tr>\n  <tr>\n    <td><b>Annual Rental Growth Rate</b></td>\n    <td><b>RENT_GROWTH</b></td>\n    <td>The YoY percentage increase in rental income from lease escalations, renewals, and new leases.</td>\n    <td>((Current Year Rental Revenue - Last Year Rental Revenue) / Last Year Rental Revenue) × 100</td>\n    <td>Subtract last year's rental revenue from current year, divide by last year, then multiply by 100.</td>\n    <td></td>\n    <td>≥ 3% (Negative or low growth may indicate stagnation.)</td>\n  </tr>\n  <tr>\n    <td><b>Percentage of Leases Expiring in Next 12 Months</b></td>\n    <td><b>LEASE_EXP_12M</b></td>\n    <td>Measures the portion of total leases set to expire in the next year, indicating renewal risk.</td>\n    <td>(Expiring Lease Space / Total Leased Space) × 100</td>\n    <td>Divide the space under expiring leases by total leased space, then multiply by 100.</td>\n    <td></td>\n    <td>≤ 15% (Higher rate may indicate tenant turnover risk.)</td>\n  </tr>\n  <tr>\n    <td><b>Revenue per Available Square Foot</b></td>\n    <td><b>REV_PSQFT</b></td>\n    <td>Total rental revenue divided by the total leased square footage, showing efficiency of revenue generation.</td>\n    <td>Total Rental Revenue / Total Leased Square Footage</td>\n    <td>Divide total rental revenue by total leased square footage.</td>\n    <td></td>\n    <td>N/A (Benchmark varies by property type.)</td>\n  </tr>\n  <tr>\n    <td><b>Operating Expense Ratio</b></td>\n    <td><b>OPEX_RATIO</b></td>\n    <td>Total operating expenses as a percentage of rental income. A lower ratio suggests better cost efficiency.</td>\n    <td>(Operating Expenses / Rental Revenue) × 100</td>\n    <td>Divide total operating expenses by rental revenue, then multiply by 100.</td>\n    <td></td>\n    <td>≤ 50% (Higher ratios indicate poor cost control.)</td>\n  </tr>\n  <tr>\n    <td><b>Net Operating Income (NOI) Margin</b></td>\n    <td><b>NOI_MARGIN</b></td>\n    <td>NOI as a percentage of total rental revenue. A higher margin indicates strong property profitability.</td>\n    <td>(Net Operating Income / Total Rental Revenue) × 100</td>\n    <td>Divide NOI by total rental revenue, then multiply by 100.</td>\n    <td></td>\n    <td>≥ 50% (Lower margins may indicate weak profitability.)</td>\n  </tr>\n  <tr>\n    <td><b>Tenant Retention Rate</b></td>\n    <td><b>TEN_RETEN</b></td>\n    <td>The percentage of expiring leases that were renewed by existing tenants, reflecting tenant satisfaction and stability.</td>\n    <td>(Number of Renewed Leases / Number of Expiring Leases) × 100</td>\n    <td>Divide renewed leases by expiring leases, then multiply by 100.</td>\n    <td></td>\n    <td>≥ 75% (Low retention indicates potential tenant dissatisfaction.)</td>\n  </tr>\n  <tr>\n    <td><b>Percentage of Fixed vs. Variable Leases</b></td>\n    <td><b>FIXED_VAR_LEASE</b></td>\n    <td>Measures how much of the lease income is fixed (contractual) versus variable (based on revenue-sharing models). Higher fixed lease income indicates stability.</td>\n    <td>(Fixed Lease Income / Total Lease Income) × 100</td>\n    <td>Divide fixed lease income by total lease income, then multiply by 100.</td>\n    <td></td>\n    <td>≥ 80% Fixed (Higher fixed lease income suggests better stability.)</td>\n  </tr>\n</table>\n",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-hSujj"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "OpenAIModel-1MQQ8",
        "type": "genericNode",
        "position": {
          "x": 8177.922494106307,
          "y": 5871.107661660216
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "Please extract the most important information related to rental health for Q3 2024 that I should know before investing in a REIT. Extract each and every piece of information that provides insights into the REIT’s tenant stability, lease structure, rental income growth, and overall property performance.\n\nFor example:\n\nBreakdown of tenants by industry sector and contribution to revenue.\nTypes of lease agreements in place (fixed, variable, revenue-sharing, percentage leases).\nKey risks associated with rental income.\nRenewal and lease expiration risks.\nBe as detailed as possible and try to provide all tables.\n\nAdditionally, create a table for lease and tenant structure, with the following columns:\n\nCategory (Type of lease/rental structure)\nExplanation (Explaining what the lease/rental structure entails)\nTenant or Industry (Major tenants or industries leasing from the REIT)\nPercentage of Total Rental Income (How much this category contributes to total rental income)\nLease Expiry Schedule (Breakdown of lease expirations by year)\nRenewal Rate (Historical renewal percentage of leases in this category)\nEscalation Clause (Any built-in rent increases or lease escalations)\nRisk (Associated risk with this rental category)\nRepercussions of Non-Renewal (What happens if tenants do not renew)\nFixed vs. Variable (Indicates if rent is fixed, variable, or a percentage of revenue)",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-1MQQ8"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "OpenAIModel-jxPxB",
        "type": "genericNode",
        "position": {
          "x": 8201.91387307283,
          "y": 6683.620537490318
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "I am an investor in REITs, and I want you to evaluate the rental health of the company based on the provided data.\n\n1. Break down the tenant structure: Identify key tenants and their contribution to rental income. Are there any high-concentration risks (e.g., a large portion of rental income coming from a few tenants)?\n2. Assess lease agreements: What type of leases does the REIT primarily operate under (fixed, variable, percentage-based)? How does this impact stability?\n3. Analyze rental income trends: Is rental income growing, stable, or declining? What are the key drivers behind this trend?\n4. Identify risks related to rental health: Does the REIT face risks such as high lease expirations in the coming year, tenant financial instability, or sector-specific risks (e.g., office space demand decline)?\n5. Provide any other relevant insights regarding rental stability, escalations, and renewal rates.\n\nFollow this structured template:\n1. Overview of Tenant & Lease Structure\n    - Breakdown of major tenants\n    - Types of lease agreements and their contribution to rental revenue\n    - Industry diversification\n\n2. Impact of Rental Income on REIT Financial Health\n    - Rental income growth/stability\n    - Comparison of fixed vs. variable leases\n    - NOI and operating margin trends\n\n3. Rental-Related Risks\n    - High dependency on a few tenants\n    - Lease expirations and renewal risks\n    - External factors affecting rental demand (e.g., economic downturns, sector-specific issues)\n\n4. Additional Considerations\n    - Lease escalations and built-in rent increases\n    - Emerging trends affecting rental health (e.g., shift from office to residential, changes in e-commerce impacting retail spaces)\n\n5. Summary\n    - Key takeaways on rental health\n    - Strengths and weaknesses of the REIT's rental structure",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-jxPxB"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "Prompt-jiAzU",
        "type": "genericNode",
        "position": {
          "x": 7503.599941364387,
          "y": 5748.6373593436065
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{All_Financial_Data}, {Criterion}",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "Criterion": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "Criterion",
                "display_name": "Criterion",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "All_Financial_Data": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "All_Financial_Data",
                "display_name": "All_Financial_Data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "All_Financial_Data",
                "Criterion"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-jiAzU"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 419
        }
      },
      {
        "id": "TextInput-8DTi2",
        "type": "genericNode",
        "position": {
          "x": 6375.366470137268,
          "y": 5838.940918320701
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "MDV",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "TextInput",
          "id": "TextInput-8DTi2"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        }
      },
      {
        "id": "TextInput-YfGEF",
        "type": "genericNode",
        "position": {
          "x": 6382.919102271433,
          "y": 6542.848665727037
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "debt",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Text to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Get text inputs from the Playground.",
            "icon": "type",
            "base_classes": [
              "Message"
            ],
            "display_name": "Text Input",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "TextInput",
          "id": "TextInput-YfGEF"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        }
      },
      {
        "id": "OpenAIModel-vWgNz",
        "type": "genericNode",
        "position": {
          "x": 8199.215664041629,
          "y": 4129.392548944569
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "You are a highly knowledgeable financial data analysis assistant. You specialize in interpreting financial statements and computing financial metrics. Your task is to read the provided data, compute the requested metrics, and return results in a strictly defined JSON format.\n",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-vWgNz"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "Prompt-VhPht",
        "type": "genericNode",
        "position": {
          "x": 7735.941173034574,
          "y": 4357.555125071522
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Below is the **financial data** you have to work with (e.g., revenue figures, net income, depreciation, etc.):\n\n{data}\n\nBelow is the **metrics definition** array:\n\n{metrics}\n\n**Your job**:\n1. For each metric, locate the relevant values in the financial data.\n2. Use the provided formula to calculate the metric’s numeric result. \n3. If any data is missing, do your best to provide an estimate if possible or set the value as NA.\n\nRemember, the output must be a valid JSON array —no additional text. Each object has the fields:\n- \"metricKey\" // same as the key in the metrics array \n- \"value\"  // the computed value as number\n- \"calculationExplanation\" //1-2 sentences explaining how you arrived at this value",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "data": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "data",
                "display_name": "data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "metrics": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "metrics",
                "display_name": "metrics",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "data",
                "metrics"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-VhPht"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 419
        }
      },
      {
        "id": "SimpleAPIRequest-f44U9",
        "type": "genericNode",
        "position": {
          "x": 9155.483735239926,
          "y": 5393.199371971132
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion report",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-f44U9"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        }
      },
      {
        "id": "CreateData-PrA5h",
        "type": "genericNode",
        "position": {
          "x": 9747.597118356938,
          "y": 4244.006813633636
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 3,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "metrics": ""
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-PrA5h"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 495
        }
      },
      {
        "id": "SimpleAPIRequest-Xegjx",
        "type": "genericNode",
        "position": {
          "x": 10124.091029590614,
          "y": 4352.9915589406555
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion metrics",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-Xegjx"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        }
      },
      {
        "id": "StructuredOutput-jtz7P",
        "type": "genericNode",
        "position": {
          "x": 8937.810803978622,
          "y": 4272.54076709423
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import TYPE_CHECKING, cast\n\nfrom pydantic import BaseModel, Field, create_model\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output, StrInput, TableInput\nfrom langflow.schema.data import Data\n\nif TYPE_CHECKING:\n    from langflow.field_typing.constants import LanguageModel\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        StrInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"description\": (\n                        \"Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).\"\n                    ),\n                    \"default\": \"text\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Multiple\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                },\n            ],\n            value=[{\"name\": \"field\", \"description\": \"description of field\", \"type\": \"text\", \"multiple\": \"False\"}],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"Set to True if the model should generate a list of outputs instead of a single output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"structured_output\", display_name=\"Structured Output\", method=\"build_structured_output\"),\n    ]\n\n    def build_structured_output(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n        if self.multiple:\n            output_model = create_model(\n                schema_name,\n                objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n            )\n        else:\n            output_model = output_model_\n        try:\n            llm_with_structured_output = cast(\"LanguageModel\", self.llm).with_structured_output(schema=output_model)  # type: ignore[valid-type, attr-defined]\n\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        output = get_chat_result(runnable=llm_with_structured_output, input_value=self.input_value, config=config_dict)\n        if isinstance(output, BaseModel):\n            output_dict = output.model_dump()\n        else:\n            msg = f\"Output should be a Pydantic BaseModel, got {type(output)} ({output})\"\n            raise TypeError(msg)\n        return Data(data=output_dict)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input message to the language model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "multiple": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "multiple",
                "value": true,
                "display_name": "Generate Multiple",
                "advanced": false,
                "dynamic": false,
                "info": "Set to True if the model should generate a list of outputs instead of a single output.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "output_schema": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Name",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Specify the name of the output field.",
                      "default": "field",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "description",
                      "display_name": "Description",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Describe the purpose of the output field.",
                      "default": "description of field",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "type",
                      "display_name": "Type",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).",
                      "default": "text",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "multiple",
                      "display_name": "Multiple",
                      "sortable": true,
                      "filterable": true,
                      "type": "boolean",
                      "description": "Set to True if this output field should be a list of the specified type.",
                      "default": "False",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": [
                  {
                    "name": "metricKey",
                    "description": "name of the metric",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "value",
                    "description": "calculated value for the metric",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "calculationExplanation",
                    "description": "1-2 liner explanation of the calculation",
                    "type": "text",
                    "multiple": "False"
                  }
                ],
                "display_name": "Output Schema",
                "advanced": false,
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "schema_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "schema_name",
                "value": "",
                "display_name": "Schema Name",
                "advanced": true,
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "icon": "braces",
            "base_classes": [
              "Data"
            ],
            "display_name": "Structured Output",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "structured_output",
                "display_name": "Structured Output",
                "method": "build_structured_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "llm",
              "input_value",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "helpers",
            "key": "StructuredOutput",
            "score": 0.007568328950209746,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "StructuredOutput",
          "id": "StructuredOutput-jtz7P"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 439
        }
      },
      {
        "id": "OpenAIModel-c8iS4",
        "type": "genericNode",
        "position": {
          "x": 8558.634245519395,
          "y": 3797.8949176421374
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "models",
            "key": "OpenAIModel",
            "score": 0.001,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-c8iS4"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "CreateData-xxXQe",
        "type": "genericNode",
        "position": {
          "x": 8717.930461798442,
          "y": 5081.773852460383
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 4,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "reportKey": "rental_income_variables"
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_4_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_4_key",
                "value": {
                  "data": ""
                },
                "display_name": "Field 4",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 4.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-xxXQe"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 577
        }
      },
      {
        "id": "CreateData-GBWFl",
        "type": "genericNode",
        "position": {
          "x": 8703.263510721628,
          "y": 5933.6529487050575
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 4,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "reportKey": "rental_income_information"
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_4_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_4_key",
                "value": {
                  "data": ""
                },
                "display_name": "Field 4",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 4.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-GBWFl"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 577
        }
      },
      {
        "id": "SimpleAPIRequest-yugav",
        "type": "genericNode",
        "position": {
          "x": 9170.687030670046,
          "y": 6176.390996753202
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion report",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-yugav"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        }
      },
      {
        "id": "CreateData-KQyjJ",
        "type": "genericNode",
        "position": {
          "x": 8689.717622690678,
          "y": 6679.775316787591
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 4,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "reportKey": "rental_income_report"
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_4_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_4_key",
                "value": {
                  "data": ""
                },
                "display_name": "Field 4",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 4.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-KQyjJ"
        },
        "selected": true,
        "measured": {
          "width": 320,
          "height": 577
        }
      },
      {
        "id": "SimpleAPIRequest-TV7zB",
        "type": "genericNode",
        "position": {
          "x": 9085.036454737103,
          "y": 6963.648644758359
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion report",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-TV7zB"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        }
      },
      {
        "id": "OpenAIModel-A6V8n",
        "type": "genericNode",
        "position": {
          "x": 8168.4919285767255,
          "y": 3080.02478436458
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "You are a highly knowledgeable REIT performance analyst. Your role is to evaluate the provided financial statements and debt-related data to create five key performance criteria for assessing this REIT’s health and risk. Each checklist item must be scored 0 or 1 based on whether the REIT meets the criterion, with clear reasoning. Return the results only as a JSON list of 5 objects.\n\nEach object in the JSON list must contain:\n- \"checklistItem\" (string): A concise name/label for the performance criterion.\n- \"oneLinerExplanation\" (string): A brief 1-line summary of why it matters.\n- \"informationUsed\" (string): Summarize the relevant data from the REIT’s financials and debt disclosures used in the assessment.\n- \"detailedExplanation\" (string): A more thorough explanation of how this item was evaluated.\n- \"evaluationLogic\" (string): How you arrived at the score, referencing any numeric thresholds, comparisons, or other logic applied.\n- \"score\" (integer): 1 if the criterion is met, 0 if not met.\n\nDo not include any additional commentary or text outside the JSON list. Output only the JSON array of 5 objects.\n",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "hidden": null,
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-A6V8n"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "Prompt-ppPYZ",
        "type": "genericNode",
        "position": {
          "x": 7749.87919068724,
          "y": 3301.9242901386287
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "Below is the information you have about the REIT, including financial statements, debt structure, and other relevant data:\n\n{data}\n\nPlease review this data and create a performance checklist of exactly five key criteria. Each criterion must:\n1) Address a critical aspect of REIT performance or risk (e.g., debt coverage, FFO growth, occupancy rates).\n2) Include numerical or specific references from the provided data in your explanation.\n3) Assign a score of 0 or 1 with clear logic on why it passes or fails.\n\nRemember, the output must be a valid JSON array of five objects only—no additional text. Each object has the fields:\n- \"checklistItem\"\n- \"oneLinerExplanation\"\n- \"informationUsed\"\n- \"detailedExplanation\"\n- \"evaluationLogic\"\n- \"score\"\n",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "data": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "data",
                "display_name": "data",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "data"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-ppPYZ"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 337
        }
      },
      {
        "id": "OpenAIModel-EWkY6",
        "type": "genericNode",
        "position": {
          "x": 8574.87919068724,
          "y": 2700
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=1, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n        IntInput(\n            name=\"max_retries\",\n            display_name=\"Max Retries\",\n            info=\"The maximum number of retries to make when generating.\",\n            advanced=True,\n            value=5,\n        ),\n        IntInput(\n            name=\"timeout\",\n            display_name=\"Timeout\",\n            info=\"The timeout for requests to OpenAI completion API.\",\n            advanced=True,\n            value=700,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n        max_retries = self.max_retries\n        timeout = self.timeout\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n            max_retries=max_retries,\n            request_timeout=timeout,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o-mini",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "stream": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "stream",
                "value": false,
                "display_name": "Stream",
                "advanced": false,
                "dynamic": false,
                "info": "Stream the response from the model. Streaming works only in Chat.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "system_message": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_message",
                "value": "",
                "display_name": "System Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System message to pass to the model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 1,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput"
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              }
            },
            "description": "Generates text using OpenAI LLMs.",
            "icon": "OpenAI",
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "display_name": "OpenAI",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text_output",
                "display_name": "Message",
                "method": "text_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [],
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "model_output",
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": [
                  "api_key"
                ],
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "system_message",
              "stream",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "models",
            "key": "OpenAIModel",
            "score": 0.001,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "OpenAIModel",
          "id": "OpenAIModel-EWkY6"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 653
        }
      },
      {
        "id": "StructuredOutput-WOm86",
        "type": "genericNode",
        "position": {
          "x": 8954.55605469412,
          "y": 3220.1610300032244
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "llm": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "The language model to use to generate the structured output.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import TYPE_CHECKING, cast\n\nfrom pydantic import BaseModel, Field, create_model\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output, StrInput, TableInput\nfrom langflow.schema.data import Data\n\nif TYPE_CHECKING:\n    from langflow.field_typing.constants import LanguageModel\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    name = \"StructuredOutput\"\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Input Message\",\n            info=\"The input message to the language model.\",\n            tool_mode=True,\n            required=True,\n        ),\n        StrInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n            advanced=True,\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            required=True,\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"description\": (\n                        \"Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).\"\n                    ),\n                    \"default\": \"text\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Multiple\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                },\n            ],\n            value=[{\"name\": \"field\", \"description\": \"description of field\", \"type\": \"text\", \"multiple\": \"False\"}],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            advanced=True,\n            display_name=\"Generate Multiple\",\n            info=\"Set to True if the model should generate a list of outputs instead of a single output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"structured_output\", display_name=\"Structured Output\", method=\"build_structured_output\"),\n    ]\n\n    def build_structured_output(self) -> Data:\n        schema_name = self.schema_name or \"OutputModel\"\n\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n        if self.multiple:\n            output_model = create_model(\n                schema_name,\n                objects=(list[output_model_], Field(description=f\"A list of {schema_name}.\")),  # type: ignore[valid-type]\n            )\n        else:\n            output_model = output_model_\n        try:\n            llm_with_structured_output = cast(\"LanguageModel\", self.llm).with_structured_output(schema=output_model)  # type: ignore[valid-type, attr-defined]\n\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        output = get_chat_result(runnable=llm_with_structured_output, input_value=self.input_value, config=config_dict)\n        if isinstance(output, BaseModel):\n            output_dict = output.model_dump()\n        else:\n            msg = f\"Output should be a Pydantic BaseModel, got {type(output)} ({output})\"\n            raise TypeError(msg)\n        return Data(data=output_dict)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input Message",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input message to the language model.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "multiple": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "multiple",
                "value": true,
                "display_name": "Generate Multiple",
                "advanced": false,
                "dynamic": false,
                "info": "Set to True if the model should generate a list of outputs instead of a single output.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "output_schema": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Name",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Specify the name of the output field.",
                      "default": "field",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "description",
                      "display_name": "Description",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Describe the purpose of the output field.",
                      "default": "description of field",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "type",
                      "display_name": "Type",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).",
                      "default": "text",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    },
                    {
                      "name": "multiple",
                      "display_name": "Multiple",
                      "sortable": true,
                      "filterable": true,
                      "type": "boolean",
                      "description": "Set to True if this output field should be a list of the specified type.",
                      "default": "False",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false,
                      "formatter": "text"
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "output_schema",
                "value": [
                  {
                    "name": "checklistItem",
                    "description": "name of checklist item",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "oneLinerExplanation",
                    "description": "explanation of the checklist item",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "informationUsed",
                    "description": "information used from the provided data to come with the given score",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "detailedExplanation",
                    "description": "explanation for the checklist item selection ",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "evaluationLogic",
                    "description": "how the checklist item got evaluated against the provided data",
                    "type": "text",
                    "multiple": "False"
                  },
                  {
                    "name": "score",
                    "description": "binary score either 1 or 0",
                    "type": "int",
                    "multiple": "False"
                  }
                ],
                "display_name": "Output Schema",
                "advanced": false,
                "dynamic": false,
                "info": "Define the structure and data types for the model's output.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "schema_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "schema_name",
                "value": "",
                "display_name": "Schema Name",
                "advanced": true,
                "dynamic": false,
                "info": "Provide a name for the output data schema.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
            "icon": "braces",
            "base_classes": [
              "Data"
            ],
            "display_name": "Structured Output",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "structured_output",
                "display_name": "Structured Output",
                "method": "build_structured_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "llm",
              "input_value",
              "schema_name",
              "output_schema",
              "multiple"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "helpers",
            "key": "StructuredOutput",
            "score": 0.007568328950209746,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "StructuredOutput",
          "id": "StructuredOutput-WOm86"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 439
        }
      },
      {
        "id": "CreateData-xRUCB",
        "type": "genericNode",
        "position": {
          "x": 9808.276671670526,
          "y": 3180.859041691584
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 3,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "load_from_db": false
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "performanceChecklist": ""
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-xRUCB"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 495
        }
      },
      {
        "id": "SimpleAPIRequest-QhzOG",
        "type": "genericNode",
        "position": {
          "x": 10202.508049938402,
          "y": 3306.831953304568
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Save criterion performance checklist",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-QhzOG"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        }
      },
      {
        "id": "ParseData-Flc3Z",
        "type": "genericNode",
        "position": {
          "x": 9376.116483177411,
          "y": 3308.278977519546
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{objects}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-Flc3Z"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        }
      },
      {
        "id": "ParseData-BCxHG",
        "type": "genericNode",
        "position": {
          "x": 9347.220208469294,
          "y": 4381.218668051692
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{objects}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-BCxHG"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        }
      },
      {
        "id": "ParseData-JJbZW",
        "type": "genericNode",
        "position": {
          "x": 11228.607548537393,
          "y": 5503.44753586356
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "data",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The data to convert to text.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n    metadata = {\n        \"legacy_name\": \"Parse Data\",\n    }\n\n    inputs = [\n        DataInput(\n            name=\"data\",\n            display_name=\"Data\",\n            info=\"The data to convert to text.\",\n            is_list=True,\n            required=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "sep": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sep",
                "value": "\n",
                "display_name": "Separator",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{status_code}",
                "display_name": "Template",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              }
            },
            "description": "Convert Data objects into Messages using any {field_name} from input data.",
            "icon": "message-square",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Data to Message",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "display_name": "Message",
                "method": "parse_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data List",
                "method": "parse_data_as_list",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "data",
              "template",
              "sep"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {
              "legacy_name": "Parse Data"
            },
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "ParseData",
          "id": "ParseData-JJbZW"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 341
        },
        "dragging": false
      },
      {
        "id": "SimpleAPIRequest-rBVqM",
        "type": "genericNode",
        "position": {
          "x": 12280.343461522407,
          "y": 5224.908181081226
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "body_data": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "body_data",
                "value": "",
                "display_name": "Body (JSON Data)",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "Parsed JSON from the JSONPayloadComponent (or any Data).",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "import json\r\nimport asyncio\r\nfrom typing import Any, Dict\r\n\r\nimport httpx\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import (\r\n    StrInput,\r\n    DropdownInput,\r\n    DataInput,\r\n    Output,\r\n)\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass SimpleAPIRequestComponent(Component):\r\n    display_name = \"Simple API Request\"\r\n    description = \"Makes an HTTP request with JSON-based body input.\"\r\n    icon = \"Globe\"\r\n    name = \"SimpleAPIRequest\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"url\",\r\n            display_name=\"URL\",\r\n            info=\"Enter the HTTP endpoint to call (e.g., https://api.example.com).\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"method\",\r\n            display_name=\"Method\",\r\n            options=[\"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"],\r\n            info=\"Select the HTTP method to use.\",\r\n        ),\r\n        DataInput(\r\n            name=\"body_data\",\r\n            display_name=\"Body (JSON Data)\",\r\n            info=\"Parsed JSON from the JSONPayloadComponent (or any Data).\",\r\n            advanced=False,\r\n        ),\r\n        TableInput(\r\n            name=\"headers_data\",\r\n            display_name=\"Headers\",\r\n            info=\"The headers to send with the request as a dictionary.\",\r\n            table_schema=[\r\n                {\r\n                    \"name\": \"key\",\r\n                    \"display_name\": \"Header\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header name\",\r\n                },\r\n                {\r\n                    \"name\": \"value\",\r\n                    \"display_name\": \"Value\",\r\n                    \"type\": \"str\",\r\n                    \"description\": \"Header value\",\r\n                },\r\n            ],\r\n            value=[],\r\n            advanced=True,\r\n            input_types=[\"Data\"],\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Response\", name=\"response\", method=\"make_request\"),\r\n    ]\r\n\r\n    async def make_request(self) -> Data:\r\n        \"\"\"Executes an HTTP request using the provided URL, method, body_data, and headers_data.\"\"\"\r\n        url = self.url\r\n        method = self.method.upper()\r\n\r\n        # Extract the actual data from the Data objects\r\n        # If \"body_data\" was from JSONPayloadComponent, it might be a dict or a string.\r\n        # We'll assume dictionary is intended for JSON body. If it's something else, handle gracefully.\r\n        body_content = self.body_data.data if self.body_data else None\r\n        if not isinstance(body_content, (dict, list)) and body_content is not None:\r\n            # If it's a plain string or something else, wrap it or parse it as needed\r\n            # For a real app, you could refine this logic. For now, we'll just send it as-is.\r\n            body_content = {\"data\": body_content}\r\n\r\n        # Same for headers\r\n        headers = {}\r\n        if self.headers_data and isinstance(self.headers_data.data, dict):\r\n            # Convert all header values to strings just to be safe\r\n            headers = {str(k): str(v) for k, v in self.headers_data.data.items()}\r\n\r\n        try:\r\n            async with httpx.AsyncClient() as client:\r\n                if method in {\"GET\", \"DELETE\"}:\r\n                    # GET/DELETE usually send no JSON body\r\n                    response = await client.request(method, url, headers=headers)\r\n                else:\r\n                    response = await client.request(method, url, headers=headers, json=body_content)\r\n\r\n                # Attempt to parse the response as JSON\r\n                try:\r\n                    resp_data = response.json()\r\n                except json.JSONDecodeError:\r\n                    # If not valid JSON, just return the raw text\r\n                    resp_data = {\"raw_text\": response.text}\r\n\r\n                return Data(\r\n                    data={\r\n                        \"status_code\": response.status_code,\r\n                        \"response\": resp_data,\r\n                    }\r\n                )\r\n\r\n        except Exception as exc:\r\n            # If there's a network error, timeouts, etc., return an error structure\r\n            return Data(data={\"error\": str(exc)})\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "headers_data": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "key",
                      "display_name": "Header",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header name",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    },
                    {
                      "name": "value",
                      "display_name": "Value",
                      "sortable": true,
                      "filterable": true,
                      "type": "text",
                      "description": "Header value",
                      "disable_edit": false,
                      "edit_mode": "modal",
                      "hidden": false
                    }
                  ]
                },
                "trigger_text": "Open table",
                "trigger_icon": "Table",
                "table_icon": "Table",
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "headers_data",
                "value": [],
                "display_name": "Headers",
                "advanced": true,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "The headers to send with the request as a dictionary.",
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              },
              "method": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT",
                  "DELETE"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "method",
                "value": "POST",
                "display_name": "Method",
                "advanced": false,
                "dynamic": false,
                "info": "Select the HTTP method to use.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "url": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "url",
                "value": "Trigger next criterion report",
                "display_name": "URL",
                "advanced": false,
                "dynamic": false,
                "info": "Enter the HTTP endpoint to call (e.g., https://api.example.com).",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              }
            },
            "description": "Makes an HTTP request with JSON-based body input.",
            "icon": "Globe",
            "base_classes": [
              "Data"
            ],
            "display_name": "Simple API Request",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "make_request",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "url",
              "method",
              "body_data",
              "headers_data"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "SimpleAPIRequest",
          "id": "SimpleAPIRequest-rBVqM"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 375
        }
      },
      {
        "id": "CreateData-CzuCm",
        "type": "genericNode",
        "position": {
          "x": 11822.994302201296,
          "y": 5036.888189305042
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs.inputs import BoolInput, DictInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.dotdict import dotdict\n\n\nclass CreateDataComponent(Component):\n    display_name: str = \"Create Data\"\n    description: str = \"Dynamically create a Data with a specified number of fields.\"\n    name: str = \"CreateData\"\n    MAX_FIELDS = 15  # Define a constant for maximum number of fields\n    legacy = True\n    icon = \"ListFilter\"\n\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Fields\",\n            info=\"Number of fields to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            range_spec=RangeSpec(min=1, max=MAX_FIELDS, step=1, step_type=\"int\"),\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"Key that identifies the field to be used as the text content.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"text_key_validator\",\n            display_name=\"Text Key Validator\",\n            advanced=True,\n            info=\"If enabled, checks if the given 'Text Key' is present in the given 'Data'.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"build_data\"),\n    ]\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name == \"number_of_fields\":\n            default_keys = [\"code\", \"_type\", \"number_of_fields\", \"text_key\", \"text_key_validator\"]\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            existing_fields = {}\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                msg = (\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}. \"\n                    \"Please adjust the number of fields to be within the allowed limit.\"\n                )\n                raise ValueError(msg)\n            if len(build_config) > len(default_keys):\n                # back up the existing template fields\n                for key in build_config.copy():\n                    if key not in default_keys:\n                        existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_key\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = DictInput(\n                        display_name=f\"Field {i}\",\n                        name=key,\n                        info=f\"Key for field {i}.\",\n                        input_types=[\"Message\", \"Data\"],\n                    )\n                    build_config[field.name] = field.to_dict()\n\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    async def build_data(self) -> Data:\n        data = self.get_data()\n        return_data = Data(data=data, text_key=self.text_key)\n        self.status = return_data\n        if self.text_key_validator:\n            self.validate_text_key()\n        return return_data\n\n    def get_data(self):\n        \"\"\"Function to get the Data from the attributes.\"\"\"\n        data = {}\n        for value_dict in self._attributes.values():\n            if isinstance(value_dict, dict):\n                # Check if the value of the value_dict is a Data\n                value_dict_ = {\n                    key: value.get_text() if isinstance(value, Data) else value for key, value in value_dict.items()\n                }\n                data.update(value_dict_)\n        return data\n\n    def validate_text_key(self) -> None:\n        \"\"\"This function validates that the Text Key is one of the keys in the Data.\"\"\"\n        data_keys = self.get_data().keys()\n        if self.text_key not in data_keys and self.text_key != \"\":\n            formatted_data_keys = \", \".join(data_keys)\n            msg = f\"Text Key: '{self.text_key}' not found in the Data keys: '{formatted_data_keys}'\"\n            raise ValueError(msg)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 4,
                "display_name": "Number of Fields",
                "advanced": false,
                "dynamic": false,
                "info": "Number of fields to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "text_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key",
                "value": "",
                "display_name": "Text Key",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Key that identifies the field to be used as the text content.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "text_key_validator": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_key_validator",
                "value": false,
                "display_name": "Text Key Validator",
                "advanced": true,
                "dynamic": false,
                "info": "If enabled, checks if the given 'Text Key' is present in the given 'Data'.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "field_1_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_key",
                "value": {
                  "ticker": ""
                },
                "display_name": "Field 1",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 1.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_2_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_2_key",
                "value": {
                  "criterionKey": "debt"
                },
                "display_name": "Field 2",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 2.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_3_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_3_key",
                "value": {
                  "shouldTriggerNext": ""
                },
                "display_name": "Field 3",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 3.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "field_4_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_4_key",
                "value": {
                  "overflow": ""
                },
                "display_name": "Field 4",
                "advanced": false,
                "input_types": [
                  "Message",
                  "Data"
                ],
                "dynamic": false,
                "info": "Key for field 4.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              }
            },
            "description": "Dynamically create a Data with a specified number of fields.",
            "icon": "ListFilter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Create Data",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "hidden": null,
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields",
              "text_key",
              "text_key_validator"
            ],
            "beta": false,
            "legacy": true,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "processing",
            "key": "CreateData",
            "score": 0.00387276615055604,
            "lf_version": "1.1.4.dev13"
          },
          "showNode": true,
          "type": "CreateData",
          "id": "CreateData-CzuCm"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 577
        }
      },
      {
        "id": "Sec10QDataExtractor-r05f7",
        "type": "genericNode",
        "position": {
          "x": 1580.9627099295726,
          "y": 422.8369216198912
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\nfrom langflow.io import MessageTextInput, Output\n\nimport requests\nimport json\n\n\"\"\"\nThis module defines a single custom component (`SecEdgarMergedComponent`) that merges\nthree different \"tools\" or functionalities for retrieving SEC 10-Q filings data:\n\n1) **All Financials (mode='all_financials')**  \n   - Retrieves the full 10-Q XBRL-based financial statements for a given ticker.\n\n2) **Specific 10-Q Report (mode='specific_report')**  \n   - Retrieves a specific part of the 10-Q for a given ticker.  \n   - e.g. 'balance_sheet', 'income_statement', etc.\n\n3) **Criteria-Related Info (mode='criteria_related_info')**  \n   - Retrieves data related to a given \"criterion\" (e.g., 'debt', 'rent') in the 10-Q.\n\n-------------------------------------------------------------------------------\nExample System Prompt (to guide the LLM on how to choose the 'mode' & inputs):\n\n\"You have a single custom SEC 10-Q data extractor tool that has 3 possible modes:\n1) 'all_financials' for full 10-Q financial data,\n2) 'specific_report' for a specific 10-Q section (balance_sheet, income_statement, etc.),\n3) 'criteria_related_info' for retrieving specific criteria.\n\nWhen a user asks for the full 10-Q financial statements, set mode='all_financials'.\nWhen a user asks for a specific statement, set mode='specific_report' and fill 'report_type'.\nWhen a user asks for a custom criterion, set mode='criteria_related_info' and fill 'criterion_key'.\nAlways set 'ticker' according to the user's request.\"\n\n-------------------------------------------------------------------------------\nExample User Prompts that will route to the correct mode:\n\n1) \"Give me the info of debt criteria of AMT in sec filing.\"\n   \"Find me info on lease obligations for AMT's latest 10-Q.\"\n   -> mode='criteria_related_info', ticker='AMT', criterion_key='debt'\n\n2) \"Give me all financial details of AMT stock in sec filing.\"\n   \"Please fetch all 10-Q financial data for AMT.\"\n   -> mode='all_financials', ticker='AMT'\n\n3) \"Give me balance sheet of AMT stock in sec filing.\"\n   \"Show me the balance sheet of AMT's latest 10-Q.\"\n   -> mode='specific_report', ticker='AMT', report_type='balance_sheet'\n\n-------------------------------------------------------------------------------\n\"\"\"\n\nclass SecEdgarMergedComponent(Component):\n    display_name = \"SEC 10-Q Data\"\n    description = \"A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"Sec10QDataExtractor\"\n\n    FINANCIALS_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/financials\"\n    SEARCH_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/search\"\n    CRITERIA_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/get-matching-criteria-attachments\"\n    \n    inputs = [\n        MessageTextInput(\n            name=\"ticker\",\n            display_name=\"Ticker\",\n            value=\"AAPL\",\n            info=\"The stock ticker symbol (e.g. AAPL).\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"all_financials\", \"specific_report\", \"criteria_related_info\"],\n            info=(\n                \"Select 'all_financials' to retrieve the full 10Q XBRL-based data.\\n\"\n                \"Select 'specific_report' to retrieve a specific part of the 10Q.\\n\"\n                \"Select 'criteria_related_info' to retrieve specific criterion data from the 10Q.\"\n            ),\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"report_type\",\n            display_name=\"Report Type (Used if mode='specific_report')\",\n            value=\"\",\n            info=\"E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"criterion_key\",\n            display_name=\"Criterion Key (Used if mode='criteria_related_info')\",\n            value=\"\",\n            info=\"Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Merged SEC Output\",\n            name=\"merged_sec_output\",\n            method=\"call_merged_tool\",\n        )\n    ]\n\n    def call_merged_tool(self) -> Message:\n        \"\"\"\n        Decide which underlying call to run based on 'mode'.\n        For PART 1, we'll return placeholder text.\n        Replace this with real Lambda calls in PART 2.\n        \"\"\"\n\n        ticker = self.ticker\n        mode = self.mode\n        report_type = self.report_type\n        criterion_key = self.criterion_key\n\n        if mode == \"all_financials\":\n            return self._call_all_financials(ticker)\n\n        elif mode == \"specific_report\":\n            return self._call_specific_report(ticker, report_type)\n        \n        elif mode == \"criteria_related_info\":\n            return self._call_criteria_info(ticker, criterion_key)\n\n        else:\n            return Message(\n                text=(\n                    f\"You selected mode '{mode}', which isn't implemented yet.\\n\"\n                    \"In the future, we can add new routes or logic here.\"\n                )\n            )\n\n    def _call_all_financials(self, ticker: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker}\n            response = requests.post(self.FINANCIALS_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=json.dumps(response_data[\"data\"], indent=2))\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/financials): {e}\"\n            return Message(text=error_text)\n\n    def _call_specific_report(self, ticker: str, report_type: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"report_type\": report_type}\n            response = requests.post(self.SEARCH_ENDPOINT, json=payload)\n            data = response.json()  \n\n            message_text = data.get(\"data\", \"\")\n            return Message(text=message_text)\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/search): {e}\"\n            return Message(text=error_text)\n\n    def _call_criteria_info(self, ticker: str, criterion_key: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"criterion_key\": criterion_key}\n            response = requests.post(self.CRITERIA_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=json.dumps(response_data[\"data\"], indent=2))\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/get-matching-criteria-attachments): {e}\"\n            return Message(text=error_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "criterion_key": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "criterion_key",
                "value": "",
                "display_name": "Criterion Key (Used if mode='criteria_related_info')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "mode": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "all_financials",
                  "specific_report",
                  "criteria_related_info"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mode",
                "value": "all_financials",
                "display_name": "Mode",
                "advanced": false,
                "dynamic": false,
                "info": "Select 'all_financials' to retrieve the full 10Q XBRL-based data.\nSelect 'specific_report' to retrieve a specific part of the 10Q.\nSelect 'criteria_related_info' to retrieve specific criterion data from the 10Q.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "report_type": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "report_type",
                "value": "",
                "display_name": "Report Type (Used if mode='specific_report')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "ticker": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ticker",
                "value": "",
                "display_name": "Ticker",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The stock ticker symbol (e.g. AAPL).",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "SEC 10-Q Data",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "merged_sec_output",
                "display_name": "Merged SEC Output",
                "method": "call_merged_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "ticker",
              "mode",
              "report_type",
              "criterion_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Sec10QDataExtractor",
          "id": "Sec10QDataExtractor-r05f7"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 515
        },
        "dragging": false
      },
      {
        "id": "Sec10QDataExtractor-38O35",
        "type": "genericNode",
        "position": {
          "x": 1575.5775543431857,
          "y": 1359.7679318109087
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\nfrom langflow.io import MessageTextInput, Output\n\nimport requests\nimport json\n\n\"\"\"\nThis module defines a single custom component (`SecEdgarMergedComponent`) that merges\nthree different \"tools\" or functionalities for retrieving SEC 10-Q filings data:\n\n1) **All Financials (mode='all_financials')**  \n   - Retrieves the full 10-Q XBRL-based financial statements for a given ticker.\n\n2) **Specific 10-Q Report (mode='specific_report')**  \n   - Retrieves a specific part of the 10-Q for a given ticker.  \n   - e.g. 'balance_sheet', 'income_statement', etc.\n\n3) **Criteria-Related Info (mode='criteria_related_info')**  \n   - Retrieves data related to a given \"criterion\" (e.g., 'debt', 'rent') in the 10-Q.\n\n-------------------------------------------------------------------------------\nExample System Prompt (to guide the LLM on how to choose the 'mode' & inputs):\n\n\"You have a single custom SEC 10-Q data extractor tool that has 3 possible modes:\n1) 'all_financials' for full 10-Q financial data,\n2) 'specific_report' for a specific 10-Q section (balance_sheet, income_statement, etc.),\n3) 'criteria_related_info' for retrieving specific criteria.\n\nWhen a user asks for the full 10-Q financial statements, set mode='all_financials'.\nWhen a user asks for a specific statement, set mode='specific_report' and fill 'report_type'.\nWhen a user asks for a custom criterion, set mode='criteria_related_info' and fill 'criterion_key'.\nAlways set 'ticker' according to the user's request.\"\n\n-------------------------------------------------------------------------------\nExample User Prompts that will route to the correct mode:\n\n1) \"Give me the info of debt criteria of AMT in sec filing.\"\n   \"Find me info on lease obligations for AMT's latest 10-Q.\"\n   -> mode='criteria_related_info', ticker='AMT', criterion_key='debt'\n\n2) \"Give me all financial details of AMT stock in sec filing.\"\n   \"Please fetch all 10-Q financial data for AMT.\"\n   -> mode='all_financials', ticker='AMT'\n\n3) \"Give me balance sheet of AMT stock in sec filing.\"\n   \"Show me the balance sheet of AMT's latest 10-Q.\"\n   -> mode='specific_report', ticker='AMT', report_type='balance_sheet'\n\n-------------------------------------------------------------------------------\n\"\"\"\n\nclass SecEdgarMergedComponent(Component):\n    display_name = \"SEC 10-Q Data\"\n    description = \"A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"Sec10QDataExtractor\"\n\n    FINANCIALS_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/financials\"\n    SEARCH_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/search\"\n    CRITERIA_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/get-matching-criteria-attachments\"\n    \n    inputs = [\n        MessageTextInput(\n            name=\"ticker\",\n            display_name=\"Ticker\",\n            value=\"AAPL\",\n            info=\"The stock ticker symbol (e.g. AAPL).\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"all_financials\", \"specific_report\", \"criteria_related_info\"],\n            info=(\n                \"Select 'all_financials' to retrieve the full 10Q XBRL-based data.\\n\"\n                \"Select 'specific_report' to retrieve a specific part of the 10Q.\\n\"\n                \"Select 'criteria_related_info' to retrieve specific criterion data from the 10Q.\"\n            ),\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"report_type\",\n            display_name=\"Report Type (Used if mode='specific_report')\",\n            value=\"\",\n            info=\"E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"criterion_key\",\n            display_name=\"Criterion Key (Used if mode='criteria_related_info')\",\n            value=\"\",\n            info=\"Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Merged SEC Output\",\n            name=\"merged_sec_output\",\n            method=\"call_merged_tool\",\n        )\n    ]\n\n    def call_merged_tool(self) -> Message:\n        \"\"\"\n        Decide which underlying call to run based on 'mode'.\n        For PART 1, we'll return placeholder text.\n        Replace this with real Lambda calls in PART 2.\n        \"\"\"\n\n        ticker = self.ticker\n        mode = self.mode\n        report_type = self.report_type\n        criterion_key = self.criterion_key\n\n        if mode == \"all_financials\":\n            return self._call_all_financials(ticker)\n\n        elif mode == \"specific_report\":\n            return self._call_specific_report(ticker, report_type)\n        \n        elif mode == \"criteria_related_info\":\n            return self._call_criteria_info(ticker, criterion_key)\n\n        else:\n            return Message(\n                text=(\n                    f\"You selected mode '{mode}', which isn't implemented yet.\\n\"\n                    \"In the future, we can add new routes or logic here.\"\n                )\n            )\n\n    def _call_all_financials(self, ticker: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker}\n            response = requests.post(self.FINANCIALS_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=json.dumps(response_data[\"data\"], indent=2))\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/financials): {e}\"\n            return Message(text=error_text)\n\n    def _call_specific_report(self, ticker: str, report_type: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"report_type\": report_type}\n            response = requests.post(self.SEARCH_ENDPOINT, json=payload)\n            data = response.json()  \n\n            message_text = data.get(\"data\", \"\")\n            return Message(text=message_text)\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/search): {e}\"\n            return Message(text=error_text)\n\n    def _call_criteria_info(self, ticker: str, criterion_key: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"criterion_key\": criterion_key}\n            response = requests.post(self.CRITERIA_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=json.dumps(response_data[\"data\"], indent=2))\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/get-matching-criteria-attachments): {e}\"\n            return Message(text=error_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "criterion_key": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "criterion_key",
                "value": "",
                "display_name": "Criterion Key (Used if mode='criteria_related_info')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "mode": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "all_financials",
                  "specific_report",
                  "criteria_related_info"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mode",
                "value": "criteria_related_info",
                "display_name": "Mode",
                "advanced": false,
                "dynamic": false,
                "info": "Select 'all_financials' to retrieve the full 10Q XBRL-based data.\nSelect 'specific_report' to retrieve a specific part of the 10Q.\nSelect 'criteria_related_info' to retrieve specific criterion data from the 10Q.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "report_type": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "report_type",
                "value": "",
                "display_name": "Report Type (Used if mode='specific_report')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "ticker": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ticker",
                "value": "",
                "display_name": "Ticker",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The stock ticker symbol (e.g. AAPL).",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "SEC 10-Q Data",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "merged_sec_output",
                "display_name": "Merged SEC Output",
                "method": "call_merged_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "ticker",
              "mode",
              "report_type",
              "criterion_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Sec10QDataExtractor",
          "id": "Sec10QDataExtractor-38O35"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 515
        },
        "dragging": false
      },
      {
        "id": "Sec10QDataExtractor-Q6YpG",
        "type": "genericNode",
        "position": {
          "x": 6930,
          "y": 5610
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\nfrom langflow.io import MessageTextInput, Output\n\nimport requests\nimport json\n\n\"\"\"\nThis module defines a single custom component (`SecEdgarMergedComponent`) that merges\nthree different \"tools\" or functionalities for retrieving SEC 10-Q filings data:\n\n1) **All Financials (mode='all_financials')**  \n   - Retrieves the full 10-Q XBRL-based financial statements for a given ticker.\n\n2) **Specific 10-Q Report (mode='specific_report')**  \n   - Retrieves a specific part of the 10-Q for a given ticker.  \n   - e.g. 'balance_sheet', 'income_statement', etc.\n\n3) **Criteria-Related Info (mode='criteria_related_info')**  \n   - Retrieves data related to a given \"criterion\" (e.g., 'debt', 'rent') in the 10-Q.\n\n-------------------------------------------------------------------------------\nExample System Prompt (to guide the LLM on how to choose the 'mode' & inputs):\n\n\"You have a single custom SEC 10-Q data extractor tool that has 3 possible modes:\n1) 'all_financials' for full 10-Q financial data,\n2) 'specific_report' for a specific 10-Q section (balance_sheet, income_statement, etc.),\n3) 'criteria_related_info' for retrieving specific criteria.\n\nWhen a user asks for the full 10-Q financial statements, set mode='all_financials'.\nWhen a user asks for a specific statement, set mode='specific_report' and fill 'report_type'.\nWhen a user asks for a custom criterion, set mode='criteria_related_info' and fill 'criterion_key'.\nAlways set 'ticker' according to the user's request.\"\n\n-------------------------------------------------------------------------------\nExample User Prompts that will route to the correct mode:\n\n1) \"Give me the info of debt criteria of AMT in sec filing.\"\n   \"Find me info on lease obligations for AMT's latest 10-Q.\"\n   -> mode='criteria_related_info', ticker='AMT', criterion_key='debt'\n\n2) \"Give me all financial details of AMT stock in sec filing.\"\n   \"Please fetch all 10-Q financial data for AMT.\"\n   -> mode='all_financials', ticker='AMT'\n\n3) \"Give me balance sheet of AMT stock in sec filing.\"\n   \"Show me the balance sheet of AMT's latest 10-Q.\"\n   -> mode='specific_report', ticker='AMT', report_type='balance_sheet'\n\n-------------------------------------------------------------------------------\n\"\"\"\n\nclass SecEdgarMergedComponent(Component):\n    display_name = \"SEC 10-Q Data\"\n    description = \"A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"Sec10QDataExtractor\"\n\n    FINANCIALS_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/financials\"\n    SEARCH_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/search\"\n    CRITERIA_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/get-matching-criteria-attachments\"\n    \n    inputs = [\n        MessageTextInput(\n            name=\"ticker\",\n            display_name=\"Ticker\",\n            value=\"AAPL\",\n            info=\"The stock ticker symbol (e.g. AAPL).\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"all_financials\", \"specific_report\", \"criteria_related_info\"],\n            info=(\n                \"Select 'all_financials' to retrieve the full 10Q XBRL-based data.\\n\"\n                \"Select 'specific_report' to retrieve a specific part of the 10Q.\\n\"\n                \"Select 'criteria_related_info' to retrieve specific criterion data from the 10Q.\"\n            ),\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"report_type\",\n            display_name=\"Report Type (Used if mode='specific_report')\",\n            value=\"\",\n            info=\"E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"criterion_key\",\n            display_name=\"Criterion Key (Used if mode='criteria_related_info')\",\n            value=\"\",\n            info=\"Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Merged SEC Output\",\n            name=\"merged_sec_output\",\n            method=\"call_merged_tool\",\n        )\n    ]\n\n    def call_merged_tool(self) -> Message:\n        \"\"\"\n        Decide which underlying call to run based on 'mode'.\n        For PART 1, we'll return placeholder text.\n        Replace this with real Lambda calls in PART 2.\n        \"\"\"\n\n        ticker = self.ticker\n        mode = self.mode\n        report_type = self.report_type\n        criterion_key = self.criterion_key\n\n        if mode == \"all_financials\":\n            return self._call_all_financials(ticker)\n\n        elif mode == \"specific_report\":\n            return self._call_specific_report(ticker, report_type)\n        \n        elif mode == \"criteria_related_info\":\n            return self._call_criteria_info(ticker, criterion_key)\n\n        else:\n            return Message(\n                text=(\n                    f\"You selected mode '{mode}', which isn't implemented yet.\\n\"\n                    \"In the future, we can add new routes or logic here.\"\n                )\n            )\n\n    def _call_all_financials(self, ticker: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker}\n            response = requests.post(self.FINANCIALS_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=json.dumps(response_data[\"data\"], indent=2))\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/financials): {e}\"\n            return Message(text=error_text)\n\n    def _call_specific_report(self, ticker: str, report_type: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"report_type\": report_type}\n            response = requests.post(self.SEARCH_ENDPOINT, json=payload)\n            data = response.json()  \n\n            message_text = data.get(\"data\", \"\")\n            return Message(text=message_text)\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/search): {e}\"\n            return Message(text=error_text)\n\n    def _call_criteria_info(self, ticker: str, criterion_key: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"criterion_key\": criterion_key}\n            response = requests.post(self.CRITERIA_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=json.dumps(response_data[\"data\"], indent=2))\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/get-matching-criteria-attachments): {e}\"\n            return Message(text=error_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "criterion_key": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "criterion_key",
                "value": "",
                "display_name": "Criterion Key (Used if mode='criteria_related_info')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "mode": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "all_financials",
                  "specific_report",
                  "criteria_related_info"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mode",
                "value": "all_financials",
                "display_name": "Mode",
                "advanced": false,
                "dynamic": false,
                "info": "Select 'all_financials' to retrieve the full 10Q XBRL-based data.\nSelect 'specific_report' to retrieve a specific part of the 10Q.\nSelect 'criteria_related_info' to retrieve specific criterion data from the 10Q.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "report_type": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "report_type",
                "value": "",
                "display_name": "Report Type (Used if mode='specific_report')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "ticker": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ticker",
                "value": "",
                "display_name": "Ticker",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The stock ticker symbol (e.g. AAPL).",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "SEC 10-Q Data",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "merged_sec_output",
                "display_name": "Merged SEC Output",
                "method": "call_merged_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "ticker",
              "mode",
              "report_type",
              "criterion_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Sec10QDataExtractor",
          "id": "Sec10QDataExtractor-Q6YpG"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 515
        }
      },
      {
        "id": "Sec10QDataExtractor-NB7qg",
        "type": "genericNode",
        "position": {
          "x": 6960,
          "y": 6465
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.inputs import DropdownInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\nfrom langflow.io import MessageTextInput, Output\n\nimport requests\nimport json\n\n\"\"\"\nThis module defines a single custom component (`SecEdgarMergedComponent`) that merges\nthree different \"tools\" or functionalities for retrieving SEC 10-Q filings data:\n\n1) **All Financials (mode='all_financials')**  \n   - Retrieves the full 10-Q XBRL-based financial statements for a given ticker.\n\n2) **Specific 10-Q Report (mode='specific_report')**  \n   - Retrieves a specific part of the 10-Q for a given ticker.  \n   - e.g. 'balance_sheet', 'income_statement', etc.\n\n3) **Criteria-Related Info (mode='criteria_related_info')**  \n   - Retrieves data related to a given \"criterion\" (e.g., 'debt', 'rent') in the 10-Q.\n\n-------------------------------------------------------------------------------\nExample System Prompt (to guide the LLM on how to choose the 'mode' & inputs):\n\n\"You have a single custom SEC 10-Q data extractor tool that has 3 possible modes:\n1) 'all_financials' for full 10-Q financial data,\n2) 'specific_report' for a specific 10-Q section (balance_sheet, income_statement, etc.),\n3) 'criteria_related_info' for retrieving specific criteria.\n\nWhen a user asks for the full 10-Q financial statements, set mode='all_financials'.\nWhen a user asks for a specific statement, set mode='specific_report' and fill 'report_type'.\nWhen a user asks for a custom criterion, set mode='criteria_related_info' and fill 'criterion_key'.\nAlways set 'ticker' according to the user's request.\"\n\n-------------------------------------------------------------------------------\nExample User Prompts that will route to the correct mode:\n\n1) \"Give me the info of debt criteria of AMT in sec filing.\"\n   \"Find me info on lease obligations for AMT's latest 10-Q.\"\n   -> mode='criteria_related_info', ticker='AMT', criterion_key='debt'\n\n2) \"Give me all financial details of AMT stock in sec filing.\"\n   \"Please fetch all 10-Q financial data for AMT.\"\n   -> mode='all_financials', ticker='AMT'\n\n3) \"Give me balance sheet of AMT stock in sec filing.\"\n   \"Show me the balance sheet of AMT's latest 10-Q.\"\n   -> mode='specific_report', ticker='AMT', report_type='balance_sheet'\n\n-------------------------------------------------------------------------------\n\"\"\"\n\nclass SecEdgarMergedComponent(Component):\n    display_name = \"SEC 10-Q Data\"\n    description = \"A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.\"\n    documentation = \"https://docs.langflow.org/components-custom-components\"\n    icon = \"custom_components\"\n    name = \"Sec10QDataExtractor\"\n\n    FINANCIALS_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/financials\"\n    SEARCH_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/search\"\n    CRITERIA_ENDPOINT = \"https://4mbhgkl77s4gubn7i2rdcllbru0wzyxl.lambda-url.us-east-1.on.aws/get-matching-criteria-attachments\"\n    \n    inputs = [\n        MessageTextInput(\n            name=\"ticker\",\n            display_name=\"Ticker\",\n            value=\"AAPL\",\n            info=\"The stock ticker symbol (e.g. AAPL).\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"all_financials\", \"specific_report\", \"criteria_related_info\"],\n            info=(\n                \"Select 'all_financials' to retrieve the full 10Q XBRL-based data.\\n\"\n                \"Select 'specific_report' to retrieve a specific part of the 10Q.\\n\"\n                \"Select 'criteria_related_info' to retrieve specific criterion data from the 10Q.\"\n            ),\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"report_type\",\n            display_name=\"Report Type (Used if mode='specific_report')\",\n            value=\"\",\n            info=\"E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"criterion_key\",\n            display_name=\"Criterion Key (Used if mode='criteria_related_info')\",\n            value=\"\",\n            info=\"Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Merged SEC Output\",\n            name=\"merged_sec_output\",\n            method=\"call_merged_tool\",\n        )\n    ]\n\n    def call_merged_tool(self) -> Message:\n        \"\"\"\n        Decide which underlying call to run based on 'mode'.\n        For PART 1, we'll return placeholder text.\n        Replace this with real Lambda calls in PART 2.\n        \"\"\"\n\n        ticker = self.ticker\n        mode = self.mode\n        report_type = self.report_type\n        criterion_key = self.criterion_key\n\n        if mode == \"all_financials\":\n            return self._call_all_financials(ticker)\n\n        elif mode == \"specific_report\":\n            return self._call_specific_report(ticker, report_type)\n        \n        elif mode == \"criteria_related_info\":\n            return self._call_criteria_info(ticker, criterion_key)\n\n        else:\n            return Message(\n                text=(\n                    f\"You selected mode '{mode}', which isn't implemented yet.\\n\"\n                    \"In the future, we can add new routes or logic here.\"\n                )\n            )\n\n    def _call_all_financials(self, ticker: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker}\n            response = requests.post(self.FINANCIALS_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=json.dumps(response_data[\"data\"], indent=2))\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/financials): {e}\"\n            return Message(text=error_text)\n\n    def _call_specific_report(self, ticker: str, report_type: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"report_type\": report_type}\n            response = requests.post(self.SEARCH_ENDPOINT, json=payload)\n            data = response.json()  \n\n            message_text = data.get(\"data\", \"\")\n            return Message(text=message_text)\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/search): {e}\"\n            return Message(text=error_text)\n\n    def _call_criteria_info(self, ticker: str, criterion_key: str) -> Message:\n        try:\n            payload = {\"ticker\": ticker, \"criterion_key\": criterion_key}\n            response = requests.post(self.CRITERIA_ENDPOINT, json=payload)\n            response_data = response.json()  \n\n            if \"message\" in response_data:\n                return Message(text=response_data[\"message\"])\n            elif \"data\" in response_data:\n                return Message(text=json.dumps(response_data[\"data\"], indent=2))\n            else:\n                return Message(text=json.dumps(response_data, indent=2))\n\n        except Exception as e:\n            error_text = f\"Error calling SEC Edgar Lambda (/get-matching-criteria-attachments): {e}\"\n            return Message(text=error_text)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "criterion_key": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "criterion_key",
                "value": "",
                "display_name": "Criterion Key (Used if mode='criteria_related_info')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Provide the criterion key to retrieve e.g. 'debt', 'rent', etc.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "mode": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "all_financials",
                  "specific_report",
                  "criteria_related_info"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "mode",
                "value": "criteria_related_info",
                "display_name": "Mode",
                "advanced": false,
                "dynamic": false,
                "info": "Select 'all_financials' to retrieve the full 10Q XBRL-based data.\nSelect 'specific_report' to retrieve a specific part of the 10Q.\nSelect 'criteria_related_info' to retrieve specific criterion data from the 10Q.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "report_type": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "report_type",
                "value": "",
                "display_name": "Report Type (Used if mode='specific_report')",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "E.g.: 'balance_sheet', 'income_statement', 'operation_statement', or 'cash_flow'.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "ticker": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "ticker",
                "value": "",
                "display_name": "Ticker",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The stock ticker symbol (e.g. AAPL).",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component for retrieving financial statements, specific reports, or criteria information from SEC 10-Q filings.",
            "icon": "custom_components",
            "base_classes": [
              "Message"
            ],
            "display_name": "SEC 10-Q Data",
            "documentation": "https://docs.langflow.org/components-custom-components",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "merged_sec_output",
                "display_name": "Merged SEC Output",
                "method": "call_merged_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "ticker",
              "mode",
              "report_type",
              "criterion_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Sec10QDataExtractor",
          "id": "Sec10QDataExtractor-NB7qg"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 515
        }
      },
      {
        "id": "note-CTuDA",
        "type": "noteNode",
        "position": {
          "x": 2295,
          "y": -2340
        },
        "data": {
          "node": {
            "description": "# Performance Checklist",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note",
          "id": "note-CTuDA"
        },
        "measured": {
          "width": 325,
          "height": 324
        },
        "selected": false,
        "width": 324,
        "height": 324,
        "resizing": false
      },
      {
        "id": "note-GWEHt",
        "type": "noteNode",
        "position": {
          "x": 1940.1369796492336,
          "y": -753.4280654505712
        },
        "data": {
          "node": {
            "description": "# Important Metrics",
            "display_name": "",
            "documentation": "",
            "template": {}
          },
          "type": "note",
          "id": "note-GWEHt"
        },
        "selected": false,
        "measured": {
          "width": 325,
          "height": 324
        },
        "dragging": false
      },
      {
        "id": "Prompt-39Hhw",
        "type": "genericNode",
        "position": {
          "x": 5445,
          "y": -2325
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{backend_base_url}\n{path}",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "backend_base_url": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "backend_base_url",
                "display_name": "backend_base_url",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "path": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "path",
                "display_name": "path",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "backend_base_url",
                "path"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-39Hhw"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 419
        }
      }
    ],
    "edges": [
      {
        "source": "Prompt-UfRq8",
        "target": "OpenAIModel-5RyXX",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-5RyXXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-UfRq8{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-5RyXX{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-5RyXXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-UfRq8",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-5RyXX",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "Prompt-UfRq8",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-wTUXc",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-wTUXcœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-wTUXc",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-UfRq8",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Prompt-UfRq8{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-wTUXc{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-wTUXcœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "Prompt-UfRq8",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-jq5cx",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-jq5cxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-jq5cx",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-UfRq8",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Prompt-UfRq8{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-jq5cx{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-jq5cxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "Webhook-V6mOQ",
        "target": "ParseData-xOKSw",
        "sourceHandle": "{œdataTypeœ:œWebhookœ,œidœ:œWebhook-V6mOQœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-xOKSwœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-Webhook-V6mOQ{œdataTypeœ:œWebhookœ,œidœ:œWebhook-V6mOQœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-xOKSw{œfieldNameœ:œdataœ,œidœ:œParseData-xOKSwœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Webhook",
            "id": "Webhook-V6mOQ",
            "name": "output_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-xOKSw",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "Webhook-V6mOQ",
        "target": "ParseData-3GuQK",
        "sourceHandle": "{œdataTypeœ:œWebhookœ,œidœ:œWebhook-V6mOQœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-3GuQKœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-Webhook-V6mOQ{œdataTypeœ:œWebhookœ,œidœ:œWebhook-V6mOQœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-3GuQK{œfieldNameœ:œdataœ,œidœ:œParseData-3GuQKœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Webhook",
            "id": "Webhook-V6mOQ",
            "name": "output_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-3GuQK",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "Webhook-V6mOQ",
        "target": "ParseData-Hdd7i",
        "sourceHandle": "{œdataTypeœ:œWebhookœ,œidœ:œWebhook-V6mOQœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Hdd7iœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-Webhook-V6mOQ{œdataTypeœ:œWebhookœ,œidœ:œWebhook-V6mOQœ,œnameœ:œoutput_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-Hdd7i{œfieldNameœ:œdataœ,œidœ:œParseData-Hdd7iœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Webhook",
            "id": "Webhook-V6mOQ",
            "name": "output_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-Hdd7i",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseData-Hdd7i",
        "target": "ParseJSONData-SBfgY",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Hdd7iœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œParseJSONData-SBfgYœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ParseData-Hdd7i{œdataTypeœ:œParseDataœ,œidœ:œParseData-Hdd7iœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ParseJSONData-SBfgY{œfieldNameœ:œinput_valueœ,œidœ:œParseJSONData-SBfgYœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-Hdd7i",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ParseJSONData-SBfgY",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseData-Hdd7i",
        "target": "ParseJSONData-2fx28",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Hdd7iœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œParseJSONData-2fx28œ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ParseData-Hdd7i{œdataTypeœ:œParseDataœ,œidœ:œParseData-Hdd7iœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ParseJSONData-2fx28{œfieldNameœ:œinput_valueœ,œidœ:œParseJSONData-2fx28œ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-Hdd7i",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ParseJSONData-2fx28",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseJSONData-2fx28",
        "target": "ParseData-yReA0",
        "sourceHandle": "{œdataTypeœ:œParseJSONDataœ,œidœ:œParseJSONData-2fx28œ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-yReA0œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-ParseJSONData-2fx28{œdataTypeœ:œParseJSONDataœ,œidœ:œParseJSONData-2fx28œ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-yReA0{œfieldNameœ:œdataœ,œidœ:œParseData-yReA0œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ParseJSONData",
            "id": "ParseJSONData-2fx28",
            "name": "filtered_data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-yReA0",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseData-yReA0",
        "target": "ConditionalRouter-99rTL",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-yReA0œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-99rTLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ParseData-yReA0{œdataTypeœ:œParseDataœ,œidœ:œParseData-yReA0œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-99rTL{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-99rTLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-yReA0",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-99rTL",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "ParseData-xOKSw",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-xOKSwœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextInput-pqbuZ",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-pqbuZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextInput-pqbuZ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-xOKSw",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-xOKSw{œdataTypeœ:œParseDataœ,œidœ:œParseData-xOKSwœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-TextInput-pqbuZ{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-pqbuZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ParseData-yReA0",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-yReA0œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-99rTL",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-99rTLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "ConditionalRouter-99rTL",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-yReA0",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-yReA0{œdataTypeœ:œParseDataœ,œidœ:œParseData-yReA0œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-99rTL{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-99rTLœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ConditionalRouter-99rTL",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-99rTLœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextInput-xCRyO",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-xCRyOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextInput-xCRyO",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-99rTL",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ConditionalRouter-99rTL{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-99rTLœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-TextInput-xCRyO{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-xCRyOœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "ParseData-yReA0",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-yReA0œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-nBmRN",
        "targetHandle": "{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-nBmRNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_text",
            "id": "ConditionalRouter-nBmRN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-yReA0",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-yReA0{œdataTypeœ:œParseDataœ,œidœ:œParseData-yReA0œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-nBmRN{œfieldNameœ:œinput_textœ,œidœ:œConditionalRouter-nBmRNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "ParseData-yReA0",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-yReA0œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ConditionalRouter-nBmRN",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-nBmRNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "message",
            "id": "ConditionalRouter-nBmRN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-yReA0",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-yReA0{œdataTypeœ:œParseDataœ,œidœ:œParseData-yReA0œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ConditionalRouter-nBmRN{œfieldNameœ:œmessageœ,œidœ:œConditionalRouter-nBmRNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "Prompt-UfRq8",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-Ysvpz",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œPrompt-Ysvpzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "Prompt-Ysvpz",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-UfRq8",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Prompt-UfRq8{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-Ysvpz{œfieldNameœ:œdataœ,œidœ:œPrompt-Ysvpzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "ParseJSONData-SBfgY",
        "sourceHandle": "{œdataTypeœ:œParseJSONDataœ,œidœ:œParseJSONData-SBfgYœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-XW3a8",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-XW3a8œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-XW3a8",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ParseJSONData",
            "id": "ParseJSONData-SBfgY",
            "name": "filtered_data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__ParseJSONData-SBfgY{œdataTypeœ:œParseJSONDataœ,œidœ:œParseJSONData-SBfgYœ,œnameœ:œfiltered_dataœ,œoutput_typesœ:[œDataœ]}-ParseData-XW3a8{œfieldNameœ:œdataœ,œidœ:œParseData-XW3a8œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "ParseData-XW3a8",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-XW3a8œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-Ysvpz",
        "targetHandle": "{œfieldNameœ:œmetricsœ,œidœ:œPrompt-Ysvpzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "metrics",
            "id": "Prompt-Ysvpz",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-XW3a8",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-XW3a8{œdataTypeœ:œParseDataœ,œidœ:œParseData-XW3a8œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-Ysvpz{œfieldNameœ:œmetricsœ,œidœ:œPrompt-Ysvpzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "Prompt-Ysvpz",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-Ysvpzœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-AX66z",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-AX66zœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-AX66z",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-Ysvpz",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Prompt-Ysvpz{œdataTypeœ:œPromptœ,œidœ:œPrompt-Ysvpzœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-AX66z{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-AX66zœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "CreateData-7GSjf",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-7GSjfœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SimpleAPIRequest-yNwXg",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-yNwXgœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-yNwXg",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-7GSjf",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__CreateData-7GSjf{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-7GSjfœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-yNwXg{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-yNwXgœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-AX66z",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-AX66zœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StructuredOutput-SYD5J",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-SYD5Jœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-SYD5J",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-AX66z",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__OpenAIModel-AX66z{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-AX66zœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-SYD5J{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-SYD5Jœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "OpenAIModel-Gdkap",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-Gdkapœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "StructuredOutput-SYD5J",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-SYD5Jœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-SYD5J",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-Gdkap",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "xy-edge__OpenAIModel-Gdkap{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-Gdkapœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-SYD5J{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-SYD5Jœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "className": "",
        "animated": false,
        "selected": false
      },
      {
        "source": "TextInput-pqbuZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-7GSjf",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-7GSjfœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-7GSjf",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-pqbuZ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-pqbuZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-7GSjf{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-7GSjfœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "CreateData-hC9YO",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-hC9YOœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SimpleAPIRequest-omPjz",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-omPjzœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-omPjz",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-hC9YO",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__CreateData-hC9YO{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-hC9YOœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-omPjz{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-omPjzœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "TextInput-pqbuZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-hC9YO",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-hC9YOœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-hC9YO",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-pqbuZ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-pqbuZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-hC9YO{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-hC9YOœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "CreateData-9sCOA",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-9sCOAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SimpleAPIRequest-JXv0R",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-JXv0Rœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-JXv0R",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-9sCOA",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__CreateData-9sCOA{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-9sCOAœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-JXv0R{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-JXv0Rœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "CreateData-5JKqC",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-5JKqCœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SimpleAPIRequest-TeYwo",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-TeYwoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-TeYwo",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-5JKqC",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__CreateData-5JKqC{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-5JKqCœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-TeYwo{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-TeYwoœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "TextInput-pqbuZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-9sCOA",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-9sCOAœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-9sCOA",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-pqbuZ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-pqbuZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-9sCOA{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-9sCOAœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "TextInput-pqbuZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-5JKqC",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-5JKqCœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-5JKqC",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-pqbuZ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-pqbuZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-5JKqC{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-5JKqCœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "Prompt-IzAg5",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-IzAg5œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-AJUy9",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-AJUy9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-AJUy9",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-IzAg5",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Prompt-IzAg5{œdataTypeœ:œPromptœ,œidœ:œPrompt-IzAg5œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-AJUy9{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-AJUy9œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "Prompt-UfRq8",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-IzAg5",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œPrompt-IzAg5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "Prompt-IzAg5",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-UfRq8",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Prompt-UfRq8{œdataTypeœ:œPromptœ,œidœ:œPrompt-UfRq8œ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-IzAg5{œfieldNameœ:œdataœ,œidœ:œPrompt-IzAg5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-3cIRT",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-3cIRTœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "StructuredOutput-8uXrj",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-8uXrjœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-8uXrj",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-3cIRT",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "xy-edge__OpenAIModel-3cIRT{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-3cIRTœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-8uXrj{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-8uXrjœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-AJUy9",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-AJUy9œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "StructuredOutput-8uXrj",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-8uXrjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-8uXrj",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-AJUy9",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__OpenAIModel-AJUy9{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-AJUy9œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-8uXrj{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-8uXrjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "CreateData-cEYyZ",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-cEYyZœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SimpleAPIRequest-qwIFU",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-qwIFUœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-qwIFU",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-cEYyZ",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__CreateData-cEYyZ{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-cEYyZœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-qwIFU{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-qwIFUœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "StructuredOutput-8uXrj",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-8uXrjœ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-a99lI",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-a99lIœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-a99lI",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-8uXrj",
            "name": "structured_output",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__StructuredOutput-8uXrj{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-8uXrjœ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}-ParseData-a99lI{œfieldNameœ:œdataœ,œidœ:œParseData-a99lIœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ParseData-UqtlT",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-UqtlTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-7GSjf",
        "targetHandle": "{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-7GSjfœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_3_key",
            "id": "CreateData-7GSjf",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-UqtlT",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-UqtlT{œdataTypeœ:œParseDataœ,œidœ:œParseData-UqtlTœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-7GSjf{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-7GSjfœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "StructuredOutput-SYD5J",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-SYD5Jœ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-UqtlT",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-UqtlTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-UqtlT",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-SYD5J",
            "name": "structured_output",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__StructuredOutput-SYD5J{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-SYD5Jœ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}-ParseData-UqtlT{œfieldNameœ:œdataœ,œidœ:œParseData-UqtlTœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ParseData-a99lI",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-a99lIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-cEYyZ",
        "targetHandle": "{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-cEYyZœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_3_key",
            "id": "CreateData-cEYyZ",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-a99lI",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-a99lI{œdataTypeœ:œParseDataœ,œidœ:œParseData-a99lIœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-cEYyZ{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-cEYyZœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "TextInput-pqbuZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-cEYyZ",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-cEYyZœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-cEYyZ",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-pqbuZ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-pqbuZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-cEYyZ{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-cEYyZœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "SimpleAPIRequest-qwIFU",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-qwIFUœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-G3dbR",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-G3dbR",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-qwIFU",
            "name": "response",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__SimpleAPIRequest-qwIFU{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-qwIFUœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-G3dbR{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "SimpleAPIRequest-yNwXg",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-yNwXgœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-G3dbR",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-G3dbR",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-yNwXg",
            "name": "response",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__SimpleAPIRequest-yNwXg{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-yNwXgœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-G3dbR{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "SimpleAPIRequest-omPjz",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-omPjzœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-G3dbR",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-G3dbR",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-omPjz",
            "name": "response",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__SimpleAPIRequest-omPjz{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-omPjzœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-G3dbR{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "SimpleAPIRequest-JXv0R",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-JXv0Rœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-G3dbR",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-G3dbR",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-JXv0R",
            "name": "response",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__SimpleAPIRequest-JXv0R{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-JXv0Rœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-G3dbR{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "SimpleAPIRequest-TeYwo",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-TeYwoœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "ParseData-G3dbR",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-G3dbR",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-TeYwo",
            "name": "response",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__SimpleAPIRequest-TeYwo{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-TeYwoœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-G3dbR{œfieldNameœ:œdataœ,œidœ:œParseData-G3dbRœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-5RyXX",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-5RyXXœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-hC9YO",
        "targetHandle": "{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-hC9YOœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_4_key",
            "id": "CreateData-hC9YO",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-5RyXX",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__OpenAIModel-5RyXX{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-5RyXXœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-CreateData-hC9YO{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-hC9YOœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-wTUXc",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-wTUXcœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-9sCOA",
        "targetHandle": "{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-9sCOAœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_4_key",
            "id": "CreateData-9sCOA",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-wTUXc",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__OpenAIModel-wTUXc{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-wTUXcœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-CreateData-9sCOA{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-9sCOAœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "OpenAIModel-jq5cx",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-jq5cxœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-5JKqC",
        "targetHandle": "{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-5JKqCœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_4_key",
            "id": "CreateData-5JKqC",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-jq5cx",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__OpenAIModel-jq5cx{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-jq5cxœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-CreateData-5JKqC{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-5JKqCœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ParseData-3GuQK",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-3GuQKœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-5LEfq",
        "targetHandle": "{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-5LEfqœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_3_key",
            "id": "CreateData-5LEfq",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-3GuQK",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-3GuQK{œdataTypeœ:œParseDataœ,œidœ:œParseData-3GuQKœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-5LEfq{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-5LEfqœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "CreateData-5LEfq",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-5LEfqœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "SimpleAPIRequest-5YuTC",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-5YuTCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-5YuTC",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-5LEfq",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__CreateData-5LEfq{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-5LEfqœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-5YuTC{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-5YuTCœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "TextInput-pqbuZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-5LEfq",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-5LEfqœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-5LEfq",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-pqbuZ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-pqbuZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-5LEfq{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-5LEfqœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ParseData-G3dbR",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-G3dbRœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-5LEfq",
        "targetHandle": "{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-5LEfqœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_4_key",
            "id": "CreateData-5LEfq",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-G3dbR",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-G3dbR{œdataTypeœ:œParseDataœ,œidœ:œParseData-G3dbRœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-5LEfq{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-5LEfqœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "TextInput-xCRyO",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-9sCOA",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-9sCOAœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-9sCOA",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-xCRyO",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-xCRyO{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-9sCOA{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-9sCOAœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-xCRyO",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-5JKqC",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-5JKqCœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-5JKqC",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-xCRyO",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-xCRyO{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-5JKqC{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-5JKqCœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-xCRyO",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-hC9YO",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-hC9YOœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-hC9YO",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-xCRyO",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-xCRyO{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-hC9YO{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-hC9YOœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-xCRyO",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-7GSjf",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-7GSjfœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-7GSjf",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-xCRyO",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-xCRyO{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-7GSjf{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-7GSjfœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-xCRyO",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-cEYyZ",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-cEYyZœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-cEYyZ",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-xCRyO",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-xCRyO{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-cEYyZ{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-cEYyZœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-xCRyO",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-5LEfq",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-5LEfqœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-5LEfq",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-xCRyO",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-xCRyO{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-5LEfq{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-5LEfqœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-jiAzU",
        "target": "OpenAIModel-hSujj",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-hSujjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-jiAzU{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-hSujj{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-hSujjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-jiAzU",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-hSujj",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-jiAzU",
        "target": "OpenAIModel-1MQQ8",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-1MQQ8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-jiAzU{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-1MQQ8{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-1MQQ8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-jiAzU",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-1MQQ8",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-jiAzU",
        "target": "OpenAIModel-jxPxB",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-jxPxBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-jiAzU{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-jxPxB{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-jxPxBœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-jiAzU",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-jxPxB",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-jiAzU",
        "target": "Prompt-VhPht",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œPrompt-VhPhtœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-jiAzU{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-VhPht{œfieldNameœ:œdataœ,œidœ:œPrompt-VhPhtœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-jiAzU",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "Prompt-VhPht",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-VhPht",
        "target": "OpenAIModel-vWgNz",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-VhPhtœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-vWgNzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-VhPht{œdataTypeœ:œPromptœ,œidœ:œPrompt-VhPhtœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-vWgNz{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-vWgNzœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-VhPht",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-vWgNz",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CreateData-PrA5h",
        "target": "SimpleAPIRequest-Xegjx",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-PrA5hœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-Xegjxœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CreateData-PrA5h{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-PrA5hœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-Xegjx{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-Xegjxœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-PrA5h",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-Xegjx",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-vWgNz",
        "target": "StructuredOutput-jtz7P",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vWgNzœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-jtz7Pœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OpenAIModel-vWgNz{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-vWgNzœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-jtz7P{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-jtz7Pœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-vWgNz",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-jtz7P",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-c8iS4",
        "target": "StructuredOutput-jtz7P",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-c8iS4œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-jtz7Pœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-OpenAIModel-c8iS4{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-c8iS4œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-jtz7P{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-jtz7Pœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-c8iS4",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          },
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-jtz7P",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-8DTi2",
        "target": "CreateData-PrA5h",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-PrA5hœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-8DTi2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-PrA5h{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-PrA5hœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-8DTi2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-PrA5h",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CreateData-xxXQe",
        "target": "SimpleAPIRequest-f44U9",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-xxXQeœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-f44U9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CreateData-xxXQe{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-xxXQeœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-f44U9{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-f44U9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-xxXQe",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-f44U9",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-8DTi2",
        "target": "CreateData-xxXQe",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-xxXQeœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-8DTi2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-xxXQe{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-xxXQeœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-8DTi2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-xxXQe",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CreateData-GBWFl",
        "target": "SimpleAPIRequest-yugav",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-GBWFlœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-yugavœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CreateData-GBWFl{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-GBWFlœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-yugav{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-yugavœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-GBWFl",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-yugav",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CreateData-KQyjJ",
        "target": "SimpleAPIRequest-TV7zB",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-KQyjJœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-TV7zBœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CreateData-KQyjJ{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-KQyjJœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-TV7zB{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-TV7zBœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-KQyjJ",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-TV7zB",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-8DTi2",
        "target": "CreateData-GBWFl",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-GBWFlœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-8DTi2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-GBWFl{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-GBWFlœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-8DTi2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-GBWFl",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-8DTi2",
        "target": "CreateData-KQyjJ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-KQyjJœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-8DTi2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-KQyjJ{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-KQyjJœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-8DTi2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-KQyjJ",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-ppPYZ",
        "target": "OpenAIModel-A6V8n",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-ppPYZœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-A6V8nœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-ppPYZ{œdataTypeœ:œPromptœ,œidœ:œPrompt-ppPYZœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-A6V8n{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-A6V8nœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-ppPYZ",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-A6V8n",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Prompt-jiAzU",
        "target": "Prompt-ppPYZ",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œPrompt-ppPYZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-jiAzU{œdataTypeœ:œPromptœ,œidœ:œPrompt-jiAzUœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Prompt-ppPYZ{œfieldNameœ:œdataœ,œidœ:œPrompt-ppPYZœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-jiAzU",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "Prompt-ppPYZ",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-EWkY6",
        "target": "StructuredOutput-WOm86",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-EWkY6œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
        "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-WOm86œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-OpenAIModel-EWkY6{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-EWkY6œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-StructuredOutput-WOm86{œfieldNameœ:œllmœ,œidœ:œStructuredOutput-WOm86œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-EWkY6",
            "name": "model_output",
            "output_types": [
              "LanguageModel"
            ]
          },
          "targetHandle": {
            "fieldName": "llm",
            "id": "StructuredOutput-WOm86",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-A6V8n",
        "target": "StructuredOutput-WOm86",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-A6V8nœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-WOm86œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-OpenAIModel-A6V8n{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-A6V8nœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-StructuredOutput-WOm86{œfieldNameœ:œinput_valueœ,œidœ:œStructuredOutput-WOm86œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-A6V8n",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "StructuredOutput-WOm86",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CreateData-xRUCB",
        "target": "SimpleAPIRequest-QhzOG",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-xRUCBœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-QhzOGœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CreateData-xRUCB{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-xRUCBœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-QhzOG{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-QhzOGœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-xRUCB",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-QhzOG",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "StructuredOutput-WOm86",
        "target": "ParseData-Flc3Z",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-WOm86œ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-Flc3Zœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-StructuredOutput-WOm86{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-WOm86œ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}-ParseData-Flc3Z{œfieldNameœ:œdataœ,œidœ:œParseData-Flc3Zœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-WOm86",
            "name": "structured_output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-Flc3Z",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-BCxHG",
        "target": "CreateData-PrA5h",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-BCxHGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-PrA5hœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-ParseData-BCxHG{œdataTypeœ:œParseDataœ,œidœ:œParseData-BCxHGœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-PrA5h{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-PrA5hœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-BCxHG",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_3_key",
            "id": "CreateData-PrA5h",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "StructuredOutput-jtz7P",
        "target": "ParseData-BCxHG",
        "sourceHandle": "{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-jtz7Pœ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-BCxHGœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-StructuredOutput-jtz7P{œdataTypeœ:œStructuredOutputœ,œidœ:œStructuredOutput-jtz7Pœ,œnameœ:œstructured_outputœ,œoutput_typesœ:[œDataœ]}-ParseData-BCxHG{œfieldNameœ:œdataœ,œidœ:œParseData-BCxHGœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "StructuredOutput",
            "id": "StructuredOutput-jtz7P",
            "name": "structured_output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-BCxHG",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-Flc3Z",
        "target": "CreateData-xRUCB",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-Flc3Zœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-xRUCBœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-ParseData-Flc3Z{œdataTypeœ:œParseDataœ,œidœ:œParseData-Flc3Zœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-xRUCB{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-xRUCBœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-Flc3Z",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_3_key",
            "id": "CreateData-xRUCB",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-8DTi2",
        "target": "CreateData-xRUCB",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-xRUCBœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-8DTi2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-xRUCB{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-xRUCBœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-8DTi2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-xRUCB",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "SimpleAPIRequest-QhzOG",
        "target": "ParseData-JJbZW",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-QhzOGœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-SimpleAPIRequest-QhzOG{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-QhzOGœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-JJbZW{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-QhzOG",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-JJbZW",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "SimpleAPIRequest-Xegjx",
        "target": "ParseData-JJbZW",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-Xegjxœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-SimpleAPIRequest-Xegjx{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-Xegjxœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-JJbZW{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-Xegjx",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-JJbZW",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "SimpleAPIRequest-f44U9",
        "target": "ParseData-JJbZW",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-f44U9œ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-SimpleAPIRequest-f44U9{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-f44U9œ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-JJbZW{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-f44U9",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-JJbZW",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "SimpleAPIRequest-yugav",
        "target": "ParseData-JJbZW",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-yugavœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-SimpleAPIRequest-yugav{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-yugavœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-JJbZW{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-yugav",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-JJbZW",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "SimpleAPIRequest-TV7zB",
        "target": "ParseData-JJbZW",
        "sourceHandle": "{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-TV7zBœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-SimpleAPIRequest-TV7zB{œdataTypeœ:œSimpleAPIRequestœ,œidœ:œSimpleAPIRequest-TV7zBœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-ParseData-JJbZW{œfieldNameœ:œdataœ,œidœ:œParseData-JJbZWœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "SimpleAPIRequest",
            "id": "SimpleAPIRequest-TV7zB",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data",
            "id": "ParseData-JJbZW",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-hSujj",
        "target": "CreateData-xxXQe",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-hSujjœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-xxXQeœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-OpenAIModel-hSujj{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-hSujjœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-CreateData-xxXQe{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-xxXQeœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-hSujj",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_4_key",
            "id": "CreateData-xxXQe",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-1MQQ8",
        "target": "CreateData-GBWFl",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-1MQQ8œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-GBWFlœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-OpenAIModel-1MQQ8{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-1MQQ8œ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-CreateData-GBWFl{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-GBWFlœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-1MQQ8",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_4_key",
            "id": "CreateData-GBWFl",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "OpenAIModel-jxPxB",
        "target": "CreateData-KQyjJ",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-jxPxBœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-KQyjJœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-OpenAIModel-jxPxB{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-jxPxBœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-CreateData-KQyjJ{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-KQyjJœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-jxPxB",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_4_key",
            "id": "CreateData-KQyjJ",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "CreateData-CzuCm",
        "target": "SimpleAPIRequest-rBVqM",
        "sourceHandle": "{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-CzuCmœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "targetHandle": "{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-rBVqMœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-CreateData-CzuCm{œdataTypeœ:œCreateDataœ,œidœ:œCreateData-CzuCmœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-SimpleAPIRequest-rBVqM{œfieldNameœ:œbody_dataœ,œidœ:œSimpleAPIRequest-rBVqMœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "CreateData",
            "id": "CreateData-CzuCm",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "body_data",
            "id": "SimpleAPIRequest-rBVqM",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-8DTi2",
        "target": "CreateData-CzuCm",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-CzuCmœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-8DTi2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-CzuCm{œfieldNameœ:œfield_1_keyœ,œidœ:œCreateData-CzuCmœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-8DTi2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_1_key",
            "id": "CreateData-CzuCm",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "ParseData-JJbZW",
        "target": "CreateData-CzuCm",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-JJbZWœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-CzuCmœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-ParseData-JJbZW{œdataTypeœ:œParseDataœ,œidœ:œParseData-JJbZWœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-CzuCm{œfieldNameœ:œfield_4_keyœ,œidœ:œCreateData-CzuCmœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-JJbZW",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_4_key",
            "id": "CreateData-CzuCm",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-YfGEF",
        "target": "CreateData-GBWFl",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-GBWFlœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-YfGEF{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-GBWFl{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-GBWFlœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-YfGEF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-GBWFl",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-YfGEF",
        "target": "CreateData-KQyjJ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-KQyjJœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-YfGEF{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-KQyjJ{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-KQyjJœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-YfGEF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-KQyjJ",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-YfGEF",
        "target": "CreateData-xxXQe",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-xxXQeœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-YfGEF{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-xxXQe{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-xxXQeœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-YfGEF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-xxXQe",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-YfGEF",
        "target": "CreateData-PrA5h",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-PrA5hœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-YfGEF{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-PrA5h{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-PrA5hœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-YfGEF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-PrA5h",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-YfGEF",
        "target": "CreateData-xRUCB",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-xRUCBœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-YfGEF{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-xRUCB{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-xRUCBœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-YfGEF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-xRUCB",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "TextInput-YfGEF",
        "target": "CreateData-CzuCm",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-CzuCmœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "id": "reactflow__edge-TextInput-YfGEF{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-CzuCm{œfieldNameœ:œfield_2_keyœ,œidœ:œCreateData-CzuCmœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-YfGEF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "field_2_key",
            "id": "CreateData-CzuCm",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          }
        },
        "selected": false,
        "className": ""
      },
      {
        "source": "Sec10QDataExtractor-r05f7",
        "sourceHandle": "{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-r05f7œ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-UfRq8",
        "targetHandle": "{œfieldNameœ:œAll_Financial_Dataœ,œidœ:œPrompt-UfRq8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "All_Financial_Data",
            "id": "Prompt-UfRq8",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Sec10QDataExtractor",
            "id": "Sec10QDataExtractor-r05f7",
            "name": "merged_sec_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Sec10QDataExtractor-r05f7{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-r05f7œ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}-Prompt-UfRq8{œfieldNameœ:œAll_Financial_Dataœ,œidœ:œPrompt-UfRq8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-pqbuZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Sec10QDataExtractor-r05f7",
        "targetHandle": "{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-r05f7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ticker",
            "id": "Sec10QDataExtractor-r05f7",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-pqbuZ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-pqbuZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-r05f7{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-r05f7œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Sec10QDataExtractor-38O35",
        "sourceHandle": "{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-38O35œ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-UfRq8",
        "targetHandle": "{œfieldNameœ:œCriterionœ,œidœ:œPrompt-UfRq8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Criterion",
            "id": "Prompt-UfRq8",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Sec10QDataExtractor",
            "id": "Sec10QDataExtractor-38O35",
            "name": "merged_sec_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Sec10QDataExtractor-38O35{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-38O35œ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}-Prompt-UfRq8{œfieldNameœ:œCriterionœ,œidœ:œPrompt-UfRq8œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-pqbuZ",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Sec10QDataExtractor-38O35",
        "targetHandle": "{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-38O35œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ticker",
            "id": "Sec10QDataExtractor-38O35",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-pqbuZ",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-pqbuZ{œdataTypeœ:œTextInputœ,œidœ:œTextInput-pqbuZœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-38O35{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-38O35œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-xCRyO",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Sec10QDataExtractor-38O35",
        "targetHandle": "{œfieldNameœ:œcriterion_keyœ,œidœ:œSec10QDataExtractor-38O35œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "criterion_key",
            "id": "Sec10QDataExtractor-38O35",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-xCRyO",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-xCRyO{œdataTypeœ:œTextInputœ,œidœ:œTextInput-xCRyOœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-38O35{œfieldNameœ:œcriterion_keyœ,œidœ:œSec10QDataExtractor-38O35œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-8DTi2",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Sec10QDataExtractor-Q6YpG",
        "targetHandle": "{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-Q6YpGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ticker",
            "id": "Sec10QDataExtractor-Q6YpG",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-8DTi2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-8DTi2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-Q6YpG{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-Q6YpGœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Sec10QDataExtractor-Q6YpG",
        "sourceHandle": "{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-Q6YpGœ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-jiAzU",
        "targetHandle": "{œfieldNameœ:œAll_Financial_Dataœ,œidœ:œPrompt-jiAzUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "All_Financial_Data",
            "id": "Prompt-jiAzU",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Sec10QDataExtractor",
            "id": "Sec10QDataExtractor-Q6YpG",
            "name": "merged_sec_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Sec10QDataExtractor-Q6YpG{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-Q6YpGœ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}-Prompt-jiAzU{œfieldNameœ:œAll_Financial_Dataœ,œidœ:œPrompt-jiAzUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-YfGEF",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Sec10QDataExtractor-NB7qg",
        "targetHandle": "{œfieldNameœ:œcriterion_keyœ,œidœ:œSec10QDataExtractor-NB7qgœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "criterion_key",
            "id": "Sec10QDataExtractor-NB7qg",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-YfGEF",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-YfGEF{œdataTypeœ:œTextInputœ,œidœ:œTextInput-YfGEFœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-NB7qg{œfieldNameœ:œcriterion_keyœ,œidœ:œSec10QDataExtractor-NB7qgœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "TextInput-8DTi2",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Sec10QDataExtractor-NB7qg",
        "targetHandle": "{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-NB7qgœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "ticker",
            "id": "Sec10QDataExtractor-NB7qg",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-8DTi2",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__TextInput-8DTi2{œdataTypeœ:œTextInputœ,œidœ:œTextInput-8DTi2œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Sec10QDataExtractor-NB7qg{œfieldNameœ:œtickerœ,œidœ:œSec10QDataExtractor-NB7qgœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "Sec10QDataExtractor-NB7qg",
        "sourceHandle": "{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-NB7qgœ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-jiAzU",
        "targetHandle": "{œfieldNameœ:œCriterionœ,œidœ:œPrompt-jiAzUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "Criterion",
            "id": "Prompt-jiAzU",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Sec10QDataExtractor",
            "id": "Sec10QDataExtractor-NB7qg",
            "name": "merged_sec_output",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Sec10QDataExtractor-NB7qg{œdataTypeœ:œSec10QDataExtractorœ,œidœ:œSec10QDataExtractor-NB7qgœ,œnameœ:œmerged_sec_outputœ,œoutput_typesœ:[œMessageœ]}-Prompt-jiAzU{œfieldNameœ:œCriterionœ,œidœ:œPrompt-jiAzUœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ParseData-xOKSw",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-xOKSwœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextInput-8DTi2",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-8DTi2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextInput-8DTi2",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-xOKSw",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-xOKSw{œdataTypeœ:œParseDataœ,œidœ:œParseData-xOKSwœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-TextInput-8DTi2{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-8DTi2œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ConditionalRouter-nBmRN",
        "sourceHandle": "{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-nBmRNœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextInput-YfGEF",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-YfGEFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextInput-YfGEF",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ConditionalRouter",
            "id": "ConditionalRouter-nBmRN",
            "name": "true_result",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ConditionalRouter-nBmRN{œdataTypeœ:œConditionalRouterœ,œidœ:œConditionalRouter-nBmRNœ,œnameœ:œtrue_resultœ,œoutput_typesœ:[œMessageœ]}-TextInput-YfGEF{œfieldNameœ:œinput_valueœ,œidœ:œTextInput-YfGEFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "ParseData-3GuQK",
        "sourceHandle": "{œdataTypeœ:œParseDataœ,œidœ:œParseData-3GuQKœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CreateData-CzuCm",
        "targetHandle": "{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-CzuCmœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "data": {
          "targetHandle": {
            "fieldName": "field_3_key",
            "id": "CreateData-CzuCm",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "dict"
          },
          "sourceHandle": {
            "dataType": "ParseData",
            "id": "ParseData-3GuQK",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ParseData-3GuQK{œdataTypeœ:œParseDataœ,œidœ:œParseData-3GuQKœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-CreateData-CzuCm{œfieldNameœ:œfield_3_keyœ,œidœ:œCreateData-CzuCmœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œdictœ}",
        "className": ""
      }
    ],
    "viewport": {
      "x": -9128.62638591454,
      "y": -7322.718983270829,
      "zoom": 1.1109743095743698
    }
  },
  "description": "Empowering Language Engineering.",
  "name": "Reits flow",
  "last_tested_version": "1.1.4.dev13",
  "endpoint_name": null,
  "is_component": false
}